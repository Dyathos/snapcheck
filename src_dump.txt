
=== /Users/capmission/Documents/carcheck/src/@types/@radix-ui__react-slider.d.ts ===
declare module '@radix-ui/react-slider';


=== /Users/capmission/Documents/carcheck/src/@types/next-auth.d.ts ===
import NextAuth from 'next-auth';

declare module 'next-auth' {
    interface Session {
        user: {
            id: string; // Add the id property
            name?: string | null;
            email?: string | null;
            image?: string | null;
        };
    }
}


=== /Users/capmission/Documents/carcheck/src/app/JsonLd.tsx ===
// src/app/JsonLd.tsx
"use client"; // Assurez-vous que ce composant est un composant client

const JsonLd = ({ jsonLd }) => {
  return (
    <script type="application/ld+json" dangerouslySetInnerHTML={{ __html: JSON.stringify(jsonLd) }} />
  );
};

export default JsonLd;

=== /Users/capmission/Documents/carcheck/src/app/api/auth/[...nextauth]/route.ts ===
import { PrismaAdapter } from "@next-auth/prisma-adapter";
import NextAuth, { AuthOptions } from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import { prisma } from "@/lib/prisma";
import bcrypt from "bcrypt";
import { Role, User } from "@/types";

export const authOptions: AuthOptions = {
  adapter: PrismaAdapter(prisma),
  providers: [
    CredentialsProvider({
      name: "Credentials",
      credentials: {
        email: { label: "Email", type: "text" },
        password: { label: "Password", type: "password" }
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          return null;
        }

        const user = await prisma.user.findUnique({
          where: { email: credentials.email },
          select: {
            id: true,
            email: true,
            password: true,
            firstName: true,
            lastName: true,
            role: true,
            department: true,
            badge: true,
            photo: true,
            phone: true
          }
        });

        // Log the retrieved user for debugging
        console.log('Retrieved User:', user);

        if (!user || !await bcrypt.compare(credentials.password, user.password)) {
          return null;
        }

        return {
          id: user.id.toString(),
          email: user.email,
          firstName: user.firstName,
          lastName: user.lastName,
          name: `${user.firstName} ${user.lastName}`,
          role: user.role as Role,
          department: user.department,
          badge: user.badge,
          photo: user.photo,
          phone: user.phone
        };
      }
    })
  ],
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.id = user.id;
        token.firstName = user.firstName;
        token.lastName = user.lastName;
        token.role = user.role;
        token.department = user.department;
        token.badge = user.badge;
        token.photo = user.photo;
        token.phone = user.phone;
      }
      // Log the token and user for debugging
      console.log('JWT Callback - Token:', token);
      console.log('JWT Callback - User:', user);
      return token;
    },
    async session({ session, token }) {
      if (token) {
        session.user.id = Number(token.id);
        session.user.firstName = token.firstName as string;
        session.user.lastName = token.lastName as string;
        session.user.role = token.role as Role;
        session.user.department = token.department as string | null;
        session.user.badge = token.badge as string | null;
        session.user.photo = token.photo as string | null;
        session.user.phone = token.phone as string | null;
      }
      // Log the session and token for debugging
      console.log('Session Callback - Session:', session);
      console.log('Session Callback - Token:', token);
      return session;
    },
  },
  session: {
    strategy: "jwt",
    maxAge: 24 * 60 * 60 // 24 hours
  },
  pages: {
    signIn: "/login",
    error: "/login"
  },
  secret: process.env.NEXTAUTH_SECRET
};

const handler = NextAuth(authOptions);

export { handler as GET, handler as POST };

=== /Users/capmission/Documents/carcheck/src/app/api/inspections/route.ts ===
import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { z } from 'zod';

const partSchema = z.object({
  partId: z.string(),
  status: z.enum(["good", "warning", "critical"]),
  notes: z.string().optional().nullable(),
});

const inspectionSchema = z.object({
  inspector: z.string(),
  badge: z.string().nullish().transform(val => val || "BADGE-DEFAULT"),
  status: z.enum(["pending", "in_progress", "completed"]),
  notes: z.string().optional(),
  vehicleId: z.string(),
  parts: z.array(z.object({
    partId: z.string(),
    status: z.string(),
    notes: z.string().optional()
  }))
});

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    console.log('Received inspection data:', JSON.stringify(body, null, 2));

    const validatedData = inspectionSchema.parse(body);
    console.log('Validated data:', JSON.stringify(validatedData, null, 2));

    const vehicle = await prisma.vehicle.findUnique({
      where: { id: validatedData.vehicleId },
      include: { parts: true },
    });

    if (!vehicle) {
      console.error('Vehicle not found:', validatedData.vehicleId);
      return NextResponse.json({ error: 'Vehicle not found' }, { status: 404 });
    }

    const vehicleParts = new Set(vehicle.parts.map(p => p.id));
    const invalidParts = validatedData.parts.filter(p => !vehicleParts.has(p.partId));

    if (invalidParts.length > 0) {
      console.error('Invalid parts:', invalidParts);
      return NextResponse.json({
        error: 'Invalid parts',
        details: `Parts not found: ${invalidParts.map(p => p.partId).join(', ')}`,
      }, { status: 400 });
    }

    const inspection = await prisma.$transaction(async (tx) => {
      console.log('Starting transaction...');

      const newInspection = await tx.inspection.create({
        data: {
          date: new Date(),
          inspector: validatedData.inspector,
          badge: validatedData.badge,
          status: validatedData.status,
          notes: validatedData.notes,
        },
      });
      console.log('Created inspection:', newInspection);

      const inspectionVehicle = await tx.inspectionVehicle.create({
        data: {
          inspectionId: newInspection.id,
          vehicleId: validatedData.vehicleId,
          status: validatedData.status,
          notes: validatedData.notes,
        },
      });
      console.log('Created inspection vehicle:', inspectionVehicle);

      const parts = await tx.inspectionPart.createMany({
        data: validatedData.parts.map(part => ({
          inspectionVehicleId: inspectionVehicle.id,
          partId: part.partId,
          status: part.status,
          notes: part.notes || '',
        })),
      });
      console.log('Created inspection parts:', parts);

      const completeInspection = await tx.inspection.findUnique({
        where: { id: newInspection.id },
        include: {
          vehicles: {
            include: {
              vehicle: true,
              parts: {
                include: {
                  part: true,
                },
              },
            },
          },
        },
      });
      console.log('Transaction completed successfully');
      return completeInspection;
    });

    console.log('Created complete inspection:', JSON.stringify(inspection, null, 2));
    return NextResponse.json(inspection);
  } catch (error) {
    console.error('Error creating inspection:', error instanceof Error ? error.message : 'Unknown error');
  
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Validation error', details: error.errors },
        { status: 400 }
      );
    }
  
    return NextResponse.json(
      { 
        error: 'Failed to create inspection',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

export async function GET() {
  try {
    const inspections = await prisma.inspection.findMany({
      include: {
        vehicles: {
          include: {
            vehicle: true,
            parts: {
              include: {
                part: true,
              },
            },
          },
        },
      },
      orderBy: {
        date: 'desc',
      },
    });

    return NextResponse.json(inspections);
  } catch (error) {
    console.error('Error fetching inspections:', error);
    return NextResponse.json(
      { error: 'Failed to fetch inspections' },
      { status: 500 }
    );
  }
}


=== /Users/capmission/Documents/carcheck/src/app/api/inspections/stats/route.ts ===
// app/api/inspections/stats/route.ts
import { NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

export async function GET() {
  try {
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    // Get uninspected vehicles
    const totalVehicles = await prisma.vehicle.count();
    const inspectedToday = await prisma.inspection.count({
      where: {
        date: {
          gte: today,
        },
      },
    });

    // Get critical cases
    const criticalCases = await prisma.vehicle.count({
      where: {
        parts: {
          some: {
            severity: 'critical',
          },
        },
      },
    });

    // Get historical data (last 7 days)
    const sevenDaysAgo = new Date(today);
    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);

    const history = await prisma.$queryRaw`
      SELECT 
        DATE(date) as date,
        COUNT(*) as inspected,
        SUM(CASE WHEN status = 'critical' THEN 1 ELSE 0 END) as critical,
        SUM(CASE WHEN status = 'pending' THEN 1 ELSE 0 END) as pending
      FROM inspections
      WHERE date >= ${sevenDaysAgo}
      GROUP BY DATE(date)
      ORDER BY date ASC
    `;

    const serializedHistory = history.map(item => ({
      ...item,
      inspected: String(item.inspected), // Convert any BigInt properties to string
      // Convert other BigInt properties if necessary
    }));
    
    return NextResponse.json({
      uninspected: String(totalVehicles - inspectedToday),
      critical: String(criticalCases),
      history: serializedHistory, // Use the serialized history
    });

  } catch (error) {
    console.error('Error fetching inspection stats:', error);
    return NextResponse.json(
      { error: 'Failed to fetch inspection stats' },
      { status: 500 }
    );
  }
}


=== /Users/capmission/Documents/carcheck/src/app/api/maintenance/route.ts ===
import { NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { z } from 'zod';

const maintenanceTaskSchema = z.object({
  vehicleId: z.string(),
  inspectionId: z.string(),
  description: z.string(),
  priority: z.enum(['low', 'medium', 'high', 'critical']),
  status: z.enum(['pending', 'in_progress', 'completed']).default('pending'),
  assignedTo: z.string().optional(),
  startDate: z.date().optional(),
  endDate: z.date().optional(),
  notes: z.string().optional(),
});

export async function POST(request: Request) {
  try {
    const body = await request.json();
    const validatedData = maintenanceTaskSchema.parse(body);

    const task = await prisma.maintenanceTask.create({
      data: {
        ...validatedData,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      include: {
        vehicle: true,
        inspection: true,
      },
    });

    return NextResponse.json(task);
  } catch (error) {
    console.error('Error creating maintenance task:', error);
    return NextResponse.json(
      { error: 'Failed to create maintenance task' },
      { status: 500 }
    );
  }
}

export async function GET() {
  try {
    const tasks = await prisma.maintenanceTask.findMany({
      include: {
        vehicle: true,
        inspection: true,
      },
      orderBy: {
        createdAt: 'desc',
      },
    });

    return NextResponse.json(tasks);
  } catch (error) {
    console.error('Error fetching maintenance tasks:', error);
    return NextResponse.json(
      { error: 'Failed to fetch maintenance tasks' },
      { status: 500 }
    );
  }
}

=== /Users/capmission/Documents/carcheck/src/app/api/maintenance/stats/route.ts ===
import { NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

export async function GET() {
  try {
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    // Get active maintenance tasks
    const active = await prisma.vehicle.findMany({
      where: {
        maintenanceTasks: {
          some: {
            status: 'active',
          },
        },
      },
      select: {
        id: true,
        brand: true,
        affectation: true,
      },
    });

    // Get completed maintenance tasks
    const completed = await prisma.vehicle.findMany({
      where: {
        maintenanceTasks: {
          some: {
            status: 'completed',
            updatedAt: {
              gte: today,
            },
          },
        },
      },
      select: {
        id: true,
        brand: true,
        affectation: true,
      },
    });

    // Get critical cases
    const critical = await prisma.vehicle.findMany({
      where: {
        parts: {
          some: {
            severity: 'critical',
          },
        },
        NOT: {
          maintenanceTasks: {
            some: {
              status: 'active',
            },
          },
        },
      },
      select: {
        id: true,
        brand: true,
        affectation: true,
      },
    });

    // Get daily actions (last 7 days)
    const sevenDaysAgo = new Date(today);
    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);

    const dailyActions = await prisma.$queryRaw`
      SELECT 
        DATE(updated_at) as date,
        SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed,
        SUM(CASE WHEN status = 'active' THEN 1 ELSE 0 END) as started,
        SUM(CASE WHEN status = 'critical' THEN 1 ELSE 0 END) as critical
      FROM maintenance_tasks
      WHERE updated_at >= ${sevenDaysAgo}
      GROUP BY DATE(updated_at)
      ORDER BY date ASC
    `;

    return NextResponse.json({
      active,
      completed,
      critical,
      dailyActions,
    });
  } catch (error) {
    const typedError = error as Error;
    console.error('Error fetching maintenance stats:', typedError.message);
    return NextResponse.json(
      { error: 'Failed to fetch maintenance stats', details: typedError.message },
      { status: 500 }
    );
  }
}

=== /Users/capmission/Documents/carcheck/src/app/api/parts/default/route.ts ===
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'

export async function GET(request: NextRequest) {
  try {
    const defaultParts = await prisma.defaultPart.findMany({
      where: {
        isActive: true,
      },
      orderBy: {
        category: 'asc',
      },
    })

    return NextResponse.json(defaultParts)
  } catch (error) {
    console.error('Error fetching default parts:', error)
    return NextResponse.json(
      { error: 'Failed to fetch default parts' },
      { status: 500 }
    )
  }
}


=== /Users/capmission/Documents/carcheck/src/app/api/parts/default/seed/route.ts ===
import { NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { defaultParts } from '@/lib/defaultParts';

export async function POST() {
  try {
    // Insérer toutes les pièces par défaut
    const createdParts = await prisma.defaultPart.createMany({
      data: defaultParts,
      skipDuplicates: true, // Évite les doublons basés sur les contraintes uniques
    });

    return NextResponse.json({
      success: true,
      message: `${createdParts.count} pièces par défaut créées`,
    });
  } catch (error) {
    console.error('Erreur lors de la création des pièces par défaut:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: 'Erreur lors de la création des pièces par défaut' 
      },
      { status: 500 }
    );
  }
}

=== /Users/capmission/Documents/carcheck/src/app/api/reports/route.ts ===
import { NextApiRequest, NextApiResponse } from 'next';
import { prisma } from '@/lib/prisma';
import { PDFDocument } from 'pdf-lib';
import nodemailer from 'nodemailer';

export const config = {
  api: {
    bodyParser: false, // Désactiver le parsing automatique
  },
};

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'POST') {
    const { frequency, filters } = req.body; // Récupérer les filtres et la fréquence

    try {
      // Récupérer les véhicules et pièces critiques
      const vehicles = await prisma.vehicle.findMany({
        include: {
          parts: true,
        },
      });

      const criticalVehicles = vehicles.filter(vehicle => 
        vehicle.parts.some(part => part.severity === 'critical')
      );

      // Créer un document PDF
      const pdfDoc = await PDFDocument.create();
      const page = pdfDoc.addPage();
      const { width, height } = page.getSize();

      // Ajouter du contenu au PDF
      page.drawText('Rapport d\'Inspection', { x: 50, y: height - 50, size: 20 });
      let yPosition = height - 100;

      criticalVehicles.forEach(vehicle => {
        page.drawText(`Véhicule: ${vehicle.brand} ${vehicle.affectation}`, { x: 50, y: yPosition });
        yPosition -= 20;
        vehicle.parts.forEach(part => {
          if (part.severity === 'critical') {
            page.drawText(`- Pièce critique: ${part.name}`, { x: 70, y: yPosition });
            yPosition -= 20;
          }
        });
        yPosition -= 20; // Espace entre les véhicules
      });

      const pdfBytes = await pdfDoc.save();

      // Configuration de Nodemailer
      const transporter = nodemailer.createTransport({
        host: 'smtp.example.com', // Remplacez par votre hôte SMTP
        port: 587,
        secure: false, // true pour 465, false pour d'autres ports
        auth: {
          user: 'your-email@example.com', // Votre adresse email
          pass: 'your-email-password', // Votre mot de passe
        },
      });

      // Envoyer le PDF par email
      await transporter.sendMail({
        from: 'your-email@example.com',
        to: 'maintenance@example.com', // Destinataire
        subject: 'Rapport d\'Inspection',
        text: 'Veuillez trouver ci-joint le rapport d\'inspection.',
        attachments: [
          {
            filename: 'report.pdf',
            content: pdfBytes,
          },
        ],
      });

      // Renvoyer le PDF au client
      res.setHeader('Content-Type', 'application/pdf');
      res.setHeader('Content-Disposition', 'attachment; filename=report.pdf');
      res.send(pdfBytes);
    } catch (error) {
      console.error('Error generating report:', error);
      res.status(500).json({ error: 'Erreur lors de la génération du rapport' });
    }
  } else {
    res.setHeader('Allow', ['POST']);
    res.status(405).end(`Method ${req.method} Not Allowed`);
  }
}

=== /Users/capmission/Documents/carcheck/src/app/api/settings/checkin/[id]/route.ts ===
import { NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'

export async function PATCH(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const json = await request.json()
    const checkInItem = await prisma.checkInItem.update({
      where: { id: params.id },
      data: json,
    })

    return NextResponse.json(checkInItem)
  } catch (error) {
    console.error('Error updating check-in item:', error)
    return NextResponse.json(
      { error: 'Une erreur est survenue lors de la mise à jour.' },
      { status: 500 }
    )
  }
}

export async function DELETE(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    // Vérifier si l'élément est standard
    const item = await prisma.checkInItem.findUnique({
      where: { id: params.id },
    })

    if (item?.isDefault) {
      return NextResponse.json(
        { error: 'Les éléments standards ne peuvent pas être supprimés.' },
        { status: 400 }
      )
    }

    await prisma.checkInItem.delete({
      where: { id: params.id },
    })

    return NextResponse.json({ success: true })
  } catch (error) {
    console.error('Error deleting check-in item:', error)
    return NextResponse.json(
      { error: 'Une erreur est survenue lors de la suppression.' },
      { status: 500 }
    )
  }
}


=== /Users/capmission/Documents/carcheck/src/app/api/settings/checkin/route.ts ===
import { NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'

export async function POST(request: Request) {
  try {
    const json = await request.json()
    const checkInItem = await prisma.checkInItem.create({
      data: {
        name: json.name,
        description: json.description,
        icon: json.icon,
        category: json.category,
        isRequired: json.isRequired,
      },
    })

    return NextResponse.json(checkInItem)
  } catch (error) {
    console.error('Error creating check-in item:', error)
    return NextResponse.json(
      { error: 'Une erreur est survenue lors de la création.' },
      { status: 500 }
    )
  }
}

export async function GET() {
  try {
    const checkInItems = await prisma.checkInItem.findMany({
      orderBy: [
        {
          category: 'asc',
        },
        {
          name: 'asc',
        },
      ],
    })

    return NextResponse.json(checkInItems)
  } catch (error) {
    console.error('Error fetching check-in items:', error)
    return NextResponse.json(
      { error: 'Une erreur est survenue lors du chargement des données.' },
      { status: 500 }
    )
  }
}


=== /Users/capmission/Documents/carcheck/src/app/api/stats/route.ts ===
import { NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

export async function GET() {
    const [vehicleCount, inspectionCount, criticalCount] = await Promise.all([
        prisma.vehicle.count(),
        prisma.inspection.count(),
        prisma.part.count({
            where: {
                severity: 'critical', // Ajoutez vos conditions ici
            },
        }),
    ]);

    return NextResponse.json({ vehicleCount, inspectionCount, criticalCount });
}

=== /Users/capmission/Documents/carcheck/src/app/api/upload/route.ts ===
import { writeFile } from 'fs/promises'
import { NextRequest, NextResponse } from 'next/server'
import path from 'path'

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData()
    const file = formData.get('file') as File
    const vehicleId = formData.get('vehicleId') as string

    if (!file) {
      return NextResponse.json(
        { error: 'No file uploaded' },
        { status: 400 }
      )
    }

    const bytes = await file.arrayBuffer()
    const buffer = Buffer.from(bytes)

    // Créer un nom de fichier unique
    const timestamp = Date.now()
    const filename = `${timestamp}-${file.name}`
    const dir = path.join(process.cwd(), 'public', 'uploads', 'inspections', vehicleId)
    const filePath = path.join(dir, filename)

    // Créer le dossier s'il n'existe pas
    await writeFile(path.join(process.cwd(), 'public', 'uploads', 'inspections', vehicleId), '', { flag: 'a' })
      .catch(() => {})

    // Sauvegarder le fichier
    await writeFile(filePath, buffer)

    // Retourner l'URL relative pour accéder au fichier
    const fileUrl = `/uploads/inspections/${vehicleId}/${filename}`

    return NextResponse.json({ fileUrl })
  } catch (error) {
    console.error('Error uploading file:', error)
    return NextResponse.json(
      { error: 'Error uploading file' },
      { status: 500 }
    )
  }
}


=== /Users/capmission/Documents/carcheck/src/app/api/users/login/route.ts ===
import { NextResponse } from 'next-auth/next';
import { signIn } from 'next-auth/react';

export async function POST(request: Request) {
    const { email, password } = await request.json();

    try {
        const result = await signIn('credentials', {
            redirect: false,
            email,
            password
        });

        if (result?.error) {
            return NextResponse.json({ error: 'Identifiants invalides' }, { status: 401 });
        }

        return NextResponse.json({ message: 'Connexion réussie' }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: 'Erreur lors de la connexion' }, { status: 500 });
    }
}

=== /Users/capmission/Documents/carcheck/src/app/api/users/me/route.ts ===
// api/users/me/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { getServerSession } from "next-auth/next";
import { authOptions } from "@/app/api/auth/[...nextauth]/route";
import { prisma } from '@/lib/prisma';

// Types
interface UpdateUserData {
  firstName?: string;
  lastName?: string;
  email?: string;
  badge?: string;
  department?: string;
  phone?: string;
  photo?: string;
}

// Constantes
const USER_SELECT_FIELDS = {
  id: true,
  firstName: true,
  lastName: true,
  email: true,
  role: true,
  photo: true,
  badge: true,
  department: true,
  phone: true
} as const;

// Helpers
async function validateSession(request: NextRequest) {
  const session = await getServerSession(authOptions);
  
  if (!session?.user) {
    throw new Error('Unauthorized');
  }
  
  return session;
}

async function getUserById(userId: string) {
  const user = await prisma.user.findUnique({
    where: { id: userId },
    select: USER_SELECT_FIELDS,
  });

  if (!user) {
    throw new Error('User not found');
  }

  return user;
}

function processFormData(formData: FormData): UpdateUserData {
  const updates: UpdateUserData = {};
  
  // Liste des champs possibles
  const fields = ['firstName', 'lastName', 'email', 'badge', 'department', 'phone', 'photo'] as const;
  
  fields.forEach(field => {
    const value = formData.get(field)?.toString();
    if (value) {
      updates[field] = value;
    }
  });

  return updates;
}

// Handlers
export async function GET(request: NextRequest) {
  try {
    const session = await validateSession(request);
    const user = await getUserById(session.user.id);
    return NextResponse.json(user);
  } catch (error) {
    if (error.message === 'Unauthorized') {
      return NextResponse.json({ error: 'Utilisateur non connecté' }, { status: 401 });
    }
    if (error.message === 'User not found') {
      return NextResponse.json({ error: 'Utilisateur non trouvé' }, { status: 404 });
    }
    
    console.error("Erreur lors de la récupération de l'utilisateur:", error);
    return NextResponse.json(
      { error: "Erreur lors de la récupération des informations de l'utilisateur" }, 
      { status: 500 }
    );
  }
}

export async function PUT(request: NextRequest) {
  try {
    const session = await validateSession(request);
    const formData = await request.formData();
    const updates = processFormData(formData);

    const updatedUser = await prisma.user.update({
      where: { id: session.user.id },
      data: updates,
      select: USER_SELECT_FIELDS,
    });

    return NextResponse.json(updatedUser);
  } catch (error) {
    if (error.message === 'Unauthorized') {
      return NextResponse.json({ error: 'Utilisateur non connecté' }, { status: 401 });
    }
    
    console.error("Erreur lors de la mise à jour de l'utilisateur:", error);
    return NextResponse.json(
      { error: "Erreur lors de la mise à jour des informations de l'utilisateur" }, 
      { status: 500 }
    );
  }
}


=== /Users/capmission/Documents/carcheck/src/app/api/users/signup/route.ts ===
import { NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import bcrypt from 'bcrypt';

export async function POST(request: Request) {
    const { firstName, lastName, email, password, role } = await request.json();

    try {
        // Vérifier si l'utilisateur existe déjà
        const existingUser = await prisma.user.findUnique({
            where: { email }
        });

        if (existingUser) {
            return NextResponse.json({ error: 'Un utilisateur avec cet email existe déjà' }, { status: 400 });
        }

        // Hachage du mot de passe
        const hashedPassword = await bcrypt.hash(password, 10);

        // Créer l'utilisateur
        const user = await prisma.user.create({
            data: {
                firstName,
                lastName,
                email,
                password: hashedPassword,
                role
            }
        });

        return NextResponse.json({ 
            message: 'Compte créé avec succès',
            user: { 
                id: user.id, 
                email: user.email, 
                role: user.role 
            }
        }, { status: 201 });
    } catch (error) {
        console.error('Erreur lors de la création du compte:', error);
        return NextResponse.json({ error: 'Erreur lors de la création du compte' }, { status: 500 });
    }
}

=== /Users/capmission/Documents/carcheck/src/app/api/vehicles/[id]/checkin/route.ts ===
import { NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'

export async function POST(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const json = await request.json()
    const updates = json.updates

    // Créer ou mettre à jour les pièces de check-in
    for (const update of updates) {
      const existingPart = await prisma.checkInPart.findUnique({
        where: { id: update.id },
      })

      if (existingPart) {
        await prisma.checkInPart.update({
          where: { id: existingPart.id },
          data: {
            status: update.status,
          },
        })
      } else {
        const newPart = await prisma.checkInPart.create({
          data: {
            vehicleId: params.id,
            itemId: update.itemId,
            status: update.status,
          },
        })

        // Ajouter un nouvel élément à l'historique
        await prisma.checkInPartHistory.create({
          data: {
            checkInPartId: newPart.id,
            status: update.status,
            severity: update.severity,
            description: update.description,
            inspector: 'User', // À remplacer par l'utilisateur connecté
          },
        })
      }
    }

    // Mettre à jour le statut de santé du véhicule
    const criticalItems = updates.filter(
      (update: any) =>
        update.status === 'warning' &&
        (update.severity === 'critical' || update.severity === 'high')
    )

    let healthStatus = 'excellent'
    if (criticalItems.length > 0) {
      healthStatus = criticalItems.some((item: any) => item.severity === 'critical')
        ? 'critical'
        : 'warning'
    }

    await prisma.vehicle.update({
      where: { id: params.id },
      data: {
        healthStatus,
        lastInspection: new Date(),
      },
    })

    return NextResponse.json({ success: true })
  } catch (error) {
    console.error('Error updating check-in:', error)
    return NextResponse.json(
      { error: 'Une erreur est survenue lors de la mise à jour.' },
      { status: 500 }
    )
  }
}

export async function GET(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const checkInParts = await prisma.checkInPart.findMany({
      where: {
        vehicleId: params.id,
      },
      include: {
        item: true,
        histories: { // Corrected from history to histories
          orderBy: {
            createdAt: 'desc',
          },
        },
      },
      orderBy: {
        item: {
          category: 'asc',
        },
      },
    })

    return NextResponse.json(checkInParts)
  } catch (error) {
    console.error('Error fetching check-in parts:', error)
    return NextResponse.json(
      { error: 'Une erreur est survenue lors du chargement des données.' },
      { status: 500 }
    )
  }
}


=== /Users/capmission/Documents/carcheck/src/app/api/vehicles/[id]/parts/route.ts ===
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const parts = await prisma.part.findMany({
      where: {
        vehicleId: params.id,
      },
      orderBy: {
        createdAt: 'desc',
      },
    })
    return NextResponse.json(parts)
  } catch (error) {
    console.error('Error fetching parts:', error)
    return NextResponse.json(
      { error: 'Failed to fetch parts' },
      { status: 500 }
    )
  }
}

export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const body = await request.json()
    console.log('Received parts data:', body)

    if (!body.parts || !Array.isArray(body.parts)) {
      return NextResponse.json(
        { error: 'Invalid parts data' },
        { status: 400 }
      )
    }

    const vehicleId = params.id

    // Vérifier si le véhicule existe
    const vehicle = await prisma.vehicle.findUnique({
      where: { id: vehicleId },
    })

    if (!vehicle) {
      return NextResponse.json(
        { error: 'Vehicle not found' },
        { status: 404 }
      )
    }

    console.log('Deleting existing parts for vehicle:', vehicleId)
    // D'abord, supprimer toutes les pièces existantes
    await prisma.part.deleteMany({
      where: {
        vehicleId,
      },
    })

    console.log('Creating new parts')
    // Ensuite, créer les nouvelles pièces
    const createdParts = await prisma.$transaction(
      body.parts.map((part: any) =>
        prisma.part.create({
          data: {
            vehicleId,
            name: part.name,
            icon: part.icon,
            category: part.category,
            severity: part.severity,
            status: part.status || 'good',
            description: part.description,
            isDefault: part.isDefault || false,
          },
        })
      )
    )

    console.log('Parts created successfully:', createdParts)
    return NextResponse.json(createdParts)
  } catch (error) {
    console.error('Error creating parts:', error)
    return NextResponse.json(
      { error: 'Failed to create parts', details: (error as Error).message },
      { status: 500 }
    )
  }
}


=== /Users/capmission/Documents/carcheck/src/app/api/vehicles/route.ts ===
import { NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { uploadVehicleImage } from '@/lib/storage';
import { mkdir } from 'fs/promises';
import path from 'path';

// Méthode GET pour récupérer tous les véhicules
export async function GET() {
  try {
    const vehicles = await prisma.vehicle.findMany({
      select: {
        id: true,
        brand: true,
        affectation: true,
        photo: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    return NextResponse.json(vehicles);
  } catch (error) {
    console.error('Error fetching vehicles:', error);
    return NextResponse.json({ error: 'Erreur lors de la récupération des véhicules' }, { status: 500 });
  }
}

// Méthode POST pour créer un nouveau véhicule
export async function POST(request: Request) {
  try {
    const formData = await request.formData();
    const brand = formData.get('brand') as string;
    const affectation = formData.get('affectation') as string;
    const photo = formData.get('photo') as File | null;

    if (!brand || !affectation) {
      return NextResponse.json(
        { error: 'La marque et l\'affectation sont requises' },
        { status: 400 }
      );
    }

    // Créer le dossier uploads s'il n'existe pas
    const uploadDir = path.join(process.cwd(), 'public', 'uploads', 'vehicles');
    await mkdir(uploadDir, { recursive: true });

    // Gérer l'upload de l'image si elle existe
    let photoPath = null;
    if (photo) {
      try {
        photoPath = await uploadVehicleImage(photo);
      } catch (error) {
        console.error('Error uploading image:', error);
        return NextResponse.json(
          { error: 'Erreur lors de l\'upload de l\'image' },
          { status: 500 }
        );
      }
    }

    const vehicle = await prisma.vehicle.create({
      data: {
        brand,
        affectation,
        photo: photoPath,
      },
    });

    return NextResponse.json(vehicle, { status: 201 });
  } catch (error) {
    console.error('Error creating vehicle:', error);
    return NextResponse.json(
      { error: 'Une erreur est survenue lors de la création du véhicule' },
      { status: 500 }
    );
  }
}

=== /Users/capmission/Documents/carcheck/src/app/error.tsx ===
'use client'

import { useEffect } from 'react'

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  useEffect(() => {
    console.error(error)
  }, [error])

  return (
    <div className="flex h-screen flex-col items-center justify-center">
      <div className="rounded-lg bg-white p-8 text-center shadow-xl">
        <h2 className="mb-4 text-2xl font-bold text-red-600">
          Une erreur est survenue !
        </h2>
        <p className="mb-4 text-gray-600">
          {error.message || "Quelque chose s'est mal passé."}
        </p>
        <button
          onClick={reset}
          className="btn btn-primary"
        >
          Réessayer
        </button>
      </div>
    </div>
  )
}


=== /Users/capmission/Documents/carcheck/src/app/globals.css ===
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;

    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --ring: 215 20.2% 65.1%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;

    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;

    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;

    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;

    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;

    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;

    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;

    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 85.7% 97.3%;

    --ring: 217.2 32.6% 17.5%;
  }

  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

@layer components {
  .btn {
    @apply px-4 py-2 rounded-md font-medium transition-colors;
  }
  
  .btn-primary {
    @apply bg-blue-600 text-white hover:bg-blue-700;
  }
  
  .btn-secondary {
    @apply bg-gray-200 text-gray-800 hover:bg-gray-300;
  }
  
  .btn-danger {
    @apply bg-red-600 text-white hover:bg-red-700;
  }
  
  .form-input {
    @apply w-full rounded-md border border-gray-300 px-3 py-2 focus:border-blue-500 focus:outline-none;
  }
  
  .form-label {
    @apply block text-sm font-medium text-gray-700 mb-1;
  }
  
  .form-error {
    @apply text-sm text-red-600 mt-1;
  }
  
  .card {
    @apply bg-white rounded-lg shadow-md p-6;
  }
}


=== /Users/capmission/Documents/carcheck/src/app/inspections/[id]/page.tsx ===
import { notFound } from 'next/navigation'
import Header from '@/components/layout/Header'
import { prisma } from '@/lib/prisma'
import { Badge } from '@/components/ui/Badge'

async function getInspection(id: string) {
  const inspection = await prisma.inspection.findUnique({
    where: { id },
    include: {
      vehicles: {
        include: {
          vehicle: true,
          parts: {
            include: {
              part: true,
            },
          },
        },
      },
    },
  })

  if (!inspection) {
    notFound()
  }

  return inspection
}

export default async function InspectionPage({
  params,
}: {
  params: { id: string }
}) {
  const inspection = await getInspection(params.id)
  const vehicle = inspection.vehicles[0]?.vehicle

  if (!vehicle) {
    notFound()
  }

  return (
    <>
      <Header
        title={`Inspection du ${inspection.date.toLocaleDateString()}`}
        showBack
      />

      <div className="p-4">
        <div className="max-w-3xl mx-auto space-y-6">
          <div className="bg-white shadow-sm rounded-lg p-6">
            <div className="space-y-4">
              <div>
                <h2 className="text-lg font-medium">Informations générales</h2>
                <dl className="mt-2 grid grid-cols-1 gap-4 sm:grid-cols-2">
                  <div>
                    <dt className="text-sm font-medium text-gray-500">Inspecteur</dt>
                    <dd className="mt-1 text-sm text-gray-900">{inspection.inspector}</dd>
                  </div>
                  <div>
                    <dt className="text-sm font-medium text-gray-500">Statut</dt>
                    <dd className="mt-1">
                      <Badge variant={inspection.status === 'completed' ? 'success' : 'default'}>
                        {inspection.status === 'completed' ? 'Terminée' : 'En cours'}
                      </Badge>
                    </dd>
                  </div>
                  <div className="sm:col-span-2">
                    <dt className="text-sm font-medium text-gray-500">Notes</dt>
                    <dd className="mt-1 text-sm text-gray-900">{inspection.notes || 'Aucune note'}</dd>
                  </div>
                </dl>
              </div>

              <div>
                <h2 className="text-lg font-medium">Véhicule</h2>
                <dl className="mt-2 grid grid-cols-1 gap-4 sm:grid-cols-2">
                  <div>
                    <dt className="text-sm font-medium text-gray-500">Affectation</dt>
                    <dd className="mt-1 text-sm text-gray-900">{vehicle.brand} {vehicle.affectation}</dd>
                  </div>
                </dl>
              </div>

              <div>
                <h2 className="text-lg font-medium">Pièces inspectées</h2>
                <div className="mt-4 space-y-4">
                  {inspection.vehicles[0]?.parts.map((inspectionPart) => (
                    <div
                      key={inspectionPart.id}
                      className="border rounded-lg p-4"
                    >
                      <div className="flex items-center justify-between">
                        <div>
                          <h4 className="font-medium">{inspectionPart.part.name}</h4>
                          {inspectionPart.part.description && (
                            <p className="text-sm text-gray-500">{inspectionPart.part.description}</p>
                          )}
                        </div>
                        <Badge
                          variant={
                            inspectionPart.status === 'critical'
                              ? 'destructive'
                              : inspectionPart.status === 'warning'
                              ? 'warning'
                              : 'success'
                          }
                        >
                          {inspectionPart.status === 'critical'
                            ? 'Critique'
                            : inspectionPart.status === 'warning'
                            ? 'À surveiller'
                            : 'Bon état'}
                        </Badge>
                      </div>
                      {inspectionPart.notes && (
                        <p className="mt-2 text-sm text-gray-500">{inspectionPart.notes}</p>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  )
}


=== /Users/capmission/Documents/carcheck/src/app/inspections/components/InspectionForm.tsx ===
"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Button } from "@/components/ui/Button";
import { Badge } from "@/components/ui/Badge";
import { getSession } from "next-auth/react";

// Schémas de validation
const partSchema = z.object({
  id: z.string(),
  status: z.enum(["good", "warning", "critical"]),
  notes: z.string().optional(),
});

const inspectionSchema = z.object({
  inspector: z.string().min(1, "Le nom de l'inspecteur est requis"),
  badge: z.string().nullable(), // Permettre null pour le badge
  status: z.enum(["pending", "in_progress", "completed"]),
  notes: z.string().optional(),
  parts: z.array(partSchema),
  defaultParts: z.array(z.string()).optional(),
});

type InspectionFormData = z.infer<typeof inspectionSchema>;

interface Part {
  id: string;
  name: string;
  status: string;
  severity: string;
  description?: string;
  category?: string;
  icon?: string;
}

interface Vehicle {
  id: string;
  brand: string;
  affectation: string;
  parts: Part[];
}

export function InspectionForm({ vehicle }: { vehicle: Vehicle }) {
  const router = useRouter();
  const [submitError, setSubmitError] = useState<string | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [defaultParts, setDefaultParts] = useState<Part[]>([]);

  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
    watch,
  } = useForm<InspectionFormData>({
    resolver: zodResolver(inspectionSchema),
    defaultValues: {
      inspector: "",
      badge: null,
      status: "in_progress",
      notes: "",
      parts: vehicle.parts.map((part) => ({
        id: part.id,
        status: "good",
        notes: "",
      })),
    },
  });

  useEffect(() => {
    const initializeForm = async () => {
      try {
        const session = await getSession();
        if (!session?.user) {
          throw new Error("Utilisateur non connecté");
        }

        const user = session.user as any; // Type assertion pour accéder aux propriétés personnalisées
        if (user.role !== "Inspecteur") {
          throw new Error("Vous n'êtes pas autorisé à réaliser une inspection");
        }

        setValue("inspector", `${user.firstName} ${user.lastName}`);
        setValue("badge", user.badge || null);
      } catch (error) {
        const message = error instanceof Error ? error.message : "Erreur d'initialisation";
        alert(message);
        router.push("/"); // Redirection vers la page d'accueil en cas d'erreur
      }
    };

    initializeForm();
  }, [setValue, router]);

  useEffect(() => {
    const loadDefaultParts = async () => {
      try {
        const response = await fetch("/api/parts/defaults");
        if (!response.ok) throw new Error("Erreur lors du chargement des pièces par défaut");
        const data = await response.json();
        setDefaultParts(data);
      } catch (error) {
        console.error("Erreur lors du chargement des pièces par défaut:", error);
      }
    };

    loadDefaultParts();
  }, []);

  const onSubmit = async (data: InspectionFormData) => {
    try {
      setSubmitError(null);
      setIsSubmitting(true);

      const selectedDefaultParts = defaultParts
        .filter((part) => {
          const checkbox = document.getElementById(`part-${part.id}`) as HTMLInputElement;
          return checkbox?.checked;
        })
        .map((part) => part.id);

      const payload = {
        inspector: data.inspector,
        status: data.status,
        badge: data.badge,
        notes: data.notes || undefined,
        vehicleId: vehicle.id,
        defaultParts: selectedDefaultParts,
        parts: data.parts.map((part) => ({
          partId: part.id,
          status: part.status,
          notes: part.notes || "",
        })),
      };

      // Ajouter le badge seulement s'il existe
      if (data.badge) {
        payload.badge = data.badge;
      }

      const response = await fetch("/api/inspections", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || "Erreur lors de la création de l'inspection");
      }

      router.refresh();
      router.push("/inspections");
    } catch (error) {
      console.error("Error creating inspection:", error);
      setSubmitError(error instanceof Error ? error.message : "Erreur lors de la création de l'inspection");
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
      {/* Le reste du JSX reste identique */}
    </form>
  );
}


=== /Users/capmission/Documents/carcheck/src/app/inspections/components/InspectionWizard.tsx ===
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/Button";
import { Badge } from "@/components/ui/Badge";
import { useSession } from "next-auth/react";
import { Session } from "next-auth";

interface CustomSession extends Session {
  user: {
    role: string;
    firstName: string;
    lastName: string;
    badge: string;
  } & Session["user"];
}

type Part = {
  id: string;
  name: string;
  status: string;
  severity: string;
  description: string | null;
  category: string | null;
  icon: string | null;
  isDefault: boolean;
  vehicleId: string;
  createdAt: Date;
  updatedAt: Date;
};

type Vehicle = {
  id: string;
  brand: string;
  affectation: string;
  photo: string | null;
  healthStatus: string | null;
  lastInspection: Date | null;
  parts: Part[];
  createdAt: Date;
  updatedAt: Date;
};

type PartInspection = {
  id: string;  // Ensure the id field is present
  status: "good" | "warning" | "critical";
  notes: string;
};

const STATUS_LABELS = {
  good: "Bon état",
  warning: "À surveiller",
  critical: "Critique",
};

export function InspectionWizard({ vehicle }: { vehicle: Vehicle }) {
  const router = useRouter();
  const { data: session } = useSession() as { data: CustomSession | null };
  const [step, setStep] = useState(1);
  const [selectedParts, setSelectedParts] = useState<Set<string>>(new Set());
  const [inspectedParts, setInspectedParts] = useState<
    Record<string, PartInspection>
  >({});
  const [error, setError] = useState<string | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Vérification simple de la session et du rôle
  if (!session?.user || session.user.role !== "Inspecteur") {
    return <div>Accès réservé aux inspecteurs.</div>;
  }

  // Étape 1 : Sélection des pièces à inspecter
  const SelectPartsStep = () => (
    <div className="space-y-4">
      <h3 className="text-lg font-medium">
        Sélectionnez les pièces à inspecter
      </h3>
      <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
        {vehicle.parts.map((part) => (
          <button
            key={part.id}
            onClick={() => {
              const newSelected = new Set(selectedParts);
              if (selectedParts.has(part.id)) {
                newSelected.delete(part.id);
              } else {
                newSelected.add(part.id);
              }
              setSelectedParts(newSelected);
            }}
            className={`p-4 border rounded-lg text-left transition-colors ${
              selectedParts.has(part.id)
                ? "border-blue-500 bg-blue-50"
                : "border-gray-200 hover:border-gray-300"
            }`}
          >
            <div className="flex items-center justify-between">
              <div>
                <h4 className="font-medium">{part.name}</h4>
                {part.description && (
                  <p className="text-sm text-gray-500">{part.description}</p>
                )}
              </div>
              <Badge
                variant={
                  part.severity === "critical"
                    ? "destructive"
                    : part.severity === "high"
                    ? "warning"
                    : "default"
                }
              >
                {part.status}
              </Badge>
            </div>
          </button>
        ))}
      </div>
      <div className="flex justify-end mt-6">
        <Button onClick={() => setStep(2)} disabled={selectedParts.size === 0}>
          Continuer
        </Button>
      </div>
    </div>
  );

  // Étape 2 : Inspection des pièces sélectionnées
  const InspectPartsStep = () => (
    <div className="space-y-6">
      <h3 className="text-lg font-medium">
        Inspectez les pièces sélectionnées
      </h3>
      {Array.from(selectedParts).map((partId) => {
        const part = vehicle.parts.find((p) => p.id === partId);
        if (!part) return null;

        return (
          <div key={part.id} className="border rounded-lg p-4 space-y-4">
            <div className="flex items-center justify-between">
              <h4 className="font-medium">{part.name}</h4>
              <Badge
                variant={
                  part.severity === "critical"
                    ? "destructive"
                    : part.severity === "high"
                    ? "warning"
                    : "default"
                }
              >
                État actuel : {part.status}
              </Badge>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                Nouvel état
              </label>
              <select
                value={inspectedParts[part.id]?.status || "good"}
                onChange={(e) => {
                  setInspectedParts({
                    ...inspectedParts,
                    [part.id]: {
                      id: part.id,  // Ensure the id is included
                      status: e.target.value as "good" | "warning" | "critical",
                      notes: inspectedParts[part.id]?.notes || "",
                    },
                  });
                }}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
              >
                <option value="good">Bon état</option>
                <option value="warning">À surveiller</option>
                <option value="critical">Critique</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                Notes
              </label>
              <textarea
                value={inspectedParts[part.id]?.notes || ""}
                onChange={(e) => {
                  setInspectedParts({
                    ...inspectedParts,
                    [part.id]: {
                      id: part.id,  // Ensure the id is included
                      status: inspectedParts[part.id]?.status || "good",
                      notes: e.target.value,
                    },
                  });
                }}
                rows={2}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
              />
            </div>
          </div>
        );
      })}
      <div className="flex justify-between mt-6">
        <Button variant="outline" onClick={() => setStep(1)}>
          Retour
        </Button>
        <Button
          onClick={() => setStep(3)}
          disabled={Object.keys(inspectedParts).length !== selectedParts.size}
        >
          Continuer
        </Button>
      </div>
    </div>
  );

  // Étape 3 : Résumé des changements
  const SummaryStep = () => (
    <div className="space-y-6">
      <h3 className="text-lg font-medium">Résumé des changements</h3>
      <div className="space-y-4">
        {Array.from(selectedParts).map((partId) => {
          const part = vehicle.parts.find((p) => p.id === partId);
          const inspection = inspectedParts[partId];
          if (!part || !inspection) return null;

          return (
            <div key={part.id} className="border rounded-lg p-4">
              <div className="flex items-center justify-between">
                <h4 className="font-medium">{part.name}</h4>
                <div className="flex items-center space-x-2">
                  <Badge variant="default">Avant : {part.status}</Badge>
                  <span className="text-gray-500">→</span>
                  <Badge
                    variant={
                      inspection.status === "critical"
                        ? "destructive"
                        : inspection.status === "warning"
                        ? "warning"
                        : "success"
                    }
                  >
                    Après : {STATUS_LABELS[inspection.status]}
                  </Badge>
                </div>
              </div>
              {inspection.notes && (
                <p className="mt-2 text-sm text-gray-500">{inspection.notes}</p>
              )}
            </div>
          );
        })}
      </div>
      <div className="flex justify-between mt-6">
        <Button variant="outline" onClick={() => setStep(2)}>
          Modifier
        </Button>
        <Button onClick={() => setStep(4)}>Continuer</Button>
      </div>
    </div>
  );

  // Étape 4 : Confirmation finale
  const FinalConfirmationStep = () => {
    const unchangedParts = vehicle.parts.filter(
      (part) => !selectedParts.has(part.id)
    );

    const handleSubmit = async () => {
      try {
        setIsSubmitting(true);
        setError(null);

        const payload = {
          inspector: `${session.user.firstName} ${session.user.lastName}`,
          badge: session.user.badge,
          vehicleId: vehicle.id,
          status: "completed",
          parts: Array.from(selectedParts).map((partId) => ({
            partId,  // Utiliser partId au lieu de id
            status: inspectedParts[partId].status,
            notes: inspectedParts[partId]?.notes || "",
          })),
        };
        

        const response = await fetch("/api/inspections", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(payload),
        });

        if (!response.ok) {
          throw new Error("Erreur lors de la création de l'inspection");
        }

        router.refresh();
        router.push("/inspections");
      } catch (error) {
        setError(error instanceof Error ? error.message : "Erreur inattendue");
      } finally {
        setIsSubmitting(false);
      }
    };

    return (
      <div className="space-y-6">
        <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4">
          <div className="flex">
            <div className="ml-3">
              <h3 className="text-sm font-medium text-yellow-800">
                Confirmation des autres pièces
              </h3>
              <div className="mt-2 text-sm text-yellow-700">
                <p>
                  {unchangedParts.length} pièces n'ont pas été modifiées. Leur
                  état précédent sera conservé.
                </p>
              </div>
            </div>
          </div>
        </div>

        <div className="space-y-4">
          <h4 className="font-medium">Pièces non modifiées :</h4>
          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
            {unchangedParts.map((part) => (
              <div key={part.id} className="border rounded-lg p-4">
                <div className="flex items-center justify-between">
                  <h5 className="font-medium">{part.name}</h5>
                  <Badge
                    variant={
                      part.status === "critical"
                        ? "destructive"
                        : part.status === "warning"
                        ? "warning"
                        : "success"
                    }
                  >
                    {part.status}
                  </Badge>
                </div>
              </div>
            ))}
          </div>
        </div>

        {error && (
          <div className="rounded-md bg-red-50 p-4">
            <p className="text-sm text-red-600">{error}</p>
          </div>
        )}

        <div className="flex justify-between mt-6">
          <Button variant="outline" onClick={() => setStep(3)}>
            Retour
          </Button>
          <div className="space-x-4">
            <Button variant="outline" onClick={() => setStep(1)}>
              Ajouter une pièce
            </Button>
            <Button onClick={handleSubmit} disabled={isSubmitting}>
              {isSubmitting ? "Validation..." : "Valider l'inspection"}
            </Button>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="space-y-6">
      <div className="border-b pb-4">
        <nav className="flex justify-between">
          {[1, 2, 3, 4].map((stepNumber) => (
            <div
              key={stepNumber}
              className={`flex items-center ${
                stepNumber === step
                  ? "text-blue-600"
                  : stepNumber < step
                  ? "text-gray-500"
                  : "text-gray-300"
              }`}
            >
              <span
                className={`w-8 h-8 flex items-center justify-center rounded-full ${
                  stepNumber === step
                    ? "bg-blue-600 text-white"
                    : stepNumber < step
                    ? "bg-gray-500 text-white"
                    : "bg-gray-200"
                }`}
              >
                {stepNumber}
              </span>
              <span className="ml-2 text-sm font-medium">
                {stepNumber === 1 && "Sélection"}
                {stepNumber === 2 && "Inspection"}
                {stepNumber === 3 && "Résumé"}
                {stepNumber === 4 && "Validation"}
              </span>
            </div>
          ))}
        </nav>
      </div>

      {step === 1 && <SelectPartsStep />}
      {step === 2 && <InspectPartsStep />}
      {step === 3 && <SummaryStep />}
      {step === 4 && <FinalConfirmationStep />}
    </div>
  );
}

=== /Users/capmission/Documents/carcheck/src/app/inspections/components/InspectionsList.tsx ===


import Link from 'next/link'
import { Badge } from '@/components/ui/Badge'
import { formatDate } from '@/lib/utils'
import { prisma } from '@/lib/prisma'
import { ChevronRightIcon, PlusIcon } from '@heroicons/react/24/outline'

async function getInspections() {
  try {
    const inspections = await prisma.inspection.findMany({
      include: {
        vehicles: {
          include: {
            vehicle: true,
            parts: {
              include: {
                part: true,
              },
            },
          },
        },
      },
      orderBy: {
        date: 'desc',
      },
    })
    return inspections
  } catch (error) {
    console.error('Error fetching inspections:', error)
    return []
  }
}

export async function InspectionsList() {
  const inspections = await getInspections()

  if (!inspections || inspections.length === 0) {
    return (
      <div className="text-center py-12">
        <h3 className="mt-2 text-sm font-semibold text-gray-900">Aucune inspection</h3>
        <p className="mt-1 text-sm text-gray-500">Commencez par créer une inspection pour un véhicule.</p>
        <div className="mt-6">
          <Link
            href="/inspections/new"
            className="inline-flex items-center rounded-md bg-blue-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600"
          >
            <PlusIcon className="-ml-0.5 mr-1.5 h-5 w-5" aria-hidden="true" />
            Nouvelle inspection
          </Link>
        </div>
      </div>
    )
  }

  return (
    <div className="divide-y divide-gray-200">
      {inspections.map((inspection) => {
        const vehicle = inspection.vehicles[0]?.vehicle
        if (!vehicle) return null

        const criticalParts = inspection.vehicles[0]?.parts.filter(
          part => part.status === 'critical'
        ).length || 0

        return (
          <Link
            key={inspection.id}
            href={`/inspections/${inspection.id}`}
            className="block hover:bg-gray-50"
          >
            <div className="px-4 py-4">
              <div className="flex justify-between items-start">
                <div>
                  <h3 className="text-base font-semibold text-gray-900">
                    {vehicle.brand} {vehicle.affectation}
                  </h3>
                  <p className="mt-1 text-sm text-gray-500">
                    Inspecteur : {inspection.inspector}
                  </p>
                  <p className="text-sm text-gray-500">
                    {formatDate(inspection.date)}
                  </p>
                </div>
                <div className="flex items-center">
                  <Badge variant={criticalParts > 0 ? 'destructive' : inspection.status === 'completed' ? 'success' : 'default'}>
                    {criticalParts > 0 
                      ? `${criticalParts} pièce${criticalParts > 1 ? 's' : ''} critique${criticalParts > 1 ? 's' : ''}` 
                      : inspection.status === 'completed' 
                        ? 'Terminée' 
                        : 'En cours'}
                  </Badge>
                  <ChevronRightIcon className="ml-4 h-5 w-5 text-gray-400" />
                </div>
              </div>
            </div>
          </Link>
        )
      })}
    </div>
  )
}


=== /Users/capmission/Documents/carcheck/src/app/inspections/components/VehicleSelect.tsx ===
'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { Badge } from '@/components/ui/Badge'

type Vehicle = {
  id: string
  brand: string
  affectation: string // Nouvelle propriété ajoutée
  photo?: string // Propriété optionnelle pour la photo
}

export function VehicleSelect() {
  const router = useRouter()
  const [vehicles, setVehicles] = useState<Vehicle[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    fetch('/api/vehicles')
      .then((res) => {
        if (!res.ok) {
          throw new Error('Network response was not ok');
        }
        return res.json();
      })
      .then((data) => {
        setVehicles(data);
        setLoading(false);
      })
      .catch((error) => {
        console.error('Error fetching vehicles:', error);
        setError('Erreur lors du chargement des véhicules. Veuillez réessayer plus tard.');
        setLoading(false);
      });
  }, []);

  const handleVehicleSelect = (vehicleId: string) => {
    router.push(`/inspections/new/${vehicleId}`)
  }

  if (loading) {
    return (
      <div className="space-y-4">
        <h2 className="text-lg font-medium">Chargement des véhicules...</h2>
        <div className="grid gap-4 sm:grid-cols-2">
          {[1, 2, 3, 4].map((i) => (
            <div
              key={i}
              className="h-24 bg-gray-100 rounded-lg animate-pulse"
            />
          ))}
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="text-center py-4">
        <p className="text-red-600">{error}</p>
        <button
          onClick={() => window.location.reload()}
          className="mt-2 text-blue-600 hover:text-blue-500"
        >
          Réessayer
        </button>
      </div>
    )
  }

  if (vehicles.length === 0) {
    return (
      <div className="text-center py-4">
        <p className="text-gray-500">Aucun véhicule disponible</p>
        <a
          href="/vehicles/new"
          className="mt-2 inline-block text-blue-600 hover:text-blue-500"
        >
          Ajouter un véhicule
        </a>
      </div>
    )
  }

  return (
    <div className="space-y-4">
      <h2 className="text-lg font-medium">Sélectionnez un véhicule</h2>
      <div className="grid gap-4 sm:grid-cols-2">
        {vehicles.map((vehicle) => (
          <button
            key={vehicle.id}
            onClick={() => handleVehicleSelect(vehicle.id)}
            className="flex items-center justify-between p-4 bg-white border rounded-lg hover:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <div className="flex items-center">
              {vehicle.photo && (
                <img src={vehicle.photo} alt={`${vehicle.brand}`} className="w-16 h-16 mr-4 rounded" />
              )}
              <div>
                <h3 className="font-medium text-gray-900">{vehicle.brand}</h3>
                <p className="text-sm text-gray-500">Affectation: {vehicle.affectation}</p>
              </div>
            </div>
          </button>
        ))}
      </div>
    </div>
  )
}

=== /Users/capmission/Documents/carcheck/src/app/inspections/new/[vehicleId]/page.tsx ===
import { notFound } from 'next/navigation';
import Header from '@/components/layout/Header';
import { prisma } from '@/lib/prisma';
import { InspectionWizard } from '../../components/InspectionWizard';

export default async function NewVehicleInspectionPage({
  params,
}: {
  params: { vehicleId: string }
}) {
  // Await the params to ensure they are resolved
  const { vehicleId } = await params;

  // Fetch the vehicle from the database
  const vehicle = await prisma.vehicle.findUnique({
    where: { id: vehicleId },
    include: {
      parts: true,
    },
  });

  // If the vehicle is not found, trigger a 404 page
  if (!vehicle) {
    notFound();
  }

  // Render the component if the vehicle is found
  return (
    <>
      <Header 
        title={`Inspection de ${vehicle.brand} ${vehicle.affectation}`}
        showBack
      />
      
      <div className="p-4">
        <div className="max-w-3xl mx-auto space-y-6">
          <div className="bg-white shadow-sm rounded-lg p-6">
            <InspectionWizard vehicle={vehicle} />
          </div>
        </div>
      </div>
    </>
  );
}

=== /Users/capmission/Documents/carcheck/src/app/inspections/new/page.tsx ===
import Header from '@/components/layout/Header'
import { VehicleSelect } from '../components/VehicleSelect'

export default function NewInspectionPage() {
  return (
    <>
      <Header 
        title="Nouvelle Inspection"
        showBack
      />
      
      <div className="p-4">
        <div className="max-w-3xl mx-auto space-y-6">
          <div className="bg-white shadow-sm rounded-lg p-6">
            <VehicleSelect />
          </div>
        </div>
      </div>
    </>
  )
}


=== /Users/capmission/Documents/carcheck/src/app/inspections/page.tsx ===
// app/inspections/page.tsx
import Link from 'next/link'
import { PlusIcon } from '@heroicons/react/24/outline'
import { InspectionsList } from './components/InspectionsList'
import { protectedRoute } from "@/lib/protectedRoute"
import AddButton from '@/components/ui/AddButton'
import InspectionOverview from '@/components/dashboards/InspecteurDashboard'

export default async function InspectionsPage() {
  const session = await protectedRoute(['Inspecteur', 'Maintenance'])
  const isInspecteur = session.user.role === 'Inspecteur'

  return (
    <div>
      {isInspecteur && (
        <AddButton 
          href="/inspections/new" 
          label="Ajouter une inspection" 
        />
      )}
      <InspectionOverview />
      <InspectionsList />
    </div>
  )
}

=== /Users/capmission/Documents/carcheck/src/app/inventory/components/InventoryFilters.tsx ===
'use client'

import { useSearchParams, useRouter, usePathname } from 'next/navigation'
import { Button } from '@/components/ui/Button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Filter, CheckCircle, AlertTriangle, Calendar } from 'lucide-react'

const healthStatuses = [
  { value: 'excellent', label: 'Excellent', icon: CheckCircle, color: 'text-green-500' },
  { value: 'good', label: 'Bon', icon: CheckCircle, color: 'text-blue-500' },
  { value: 'fair', label: 'Moyen', icon: AlertTriangle, color: 'text-yellow-500' },
  { value: 'poor', label: 'Mauvais', icon: AlertTriangle, color: 'text-orange-500' },
  { value: 'critical', label: 'Critique', icon: AlertTriangle, color: 'text-red-500' },
]

const severityLevels = [
  { value: 'low', label: 'Faible', color: 'border-blue-200 hover:border-blue-300 hover:bg-blue-50' },
  { value: 'medium', label: 'Moyen', color: 'border-yellow-200 hover:border-yellow-300 hover:bg-yellow-50' },
  { value: 'high', label: 'Élevé', color: 'border-orange-200 hover:border-orange-300 hover:bg-orange-50' },
  { value: 'critical', label: 'Critique', color: 'border-red-200 hover:border-red-300 hover:bg-red-50' },
]

export function InventoryFilters() {
  const searchParams = useSearchParams()
  const router = useRouter()
  const pathname = usePathname()

  const currentHealth = searchParams.get('health')
  const currentSeverity = searchParams.get('severity')
  const notInspectedToday = searchParams.get('notInspected') === 'true'

  const createQueryString = (name: string, value: string) => {
    const params = new URLSearchParams(searchParams.toString())
    if (value) {
      params.set(name, value)
    } else {
      params.delete(name)
    }
    return params.toString()
  }

  const toggleFilter = (name: string, value: string) => {
    const current = searchParams.get(name)
    const newValue = current === value ? '' : value
    router.push(pathname + '?' + createQueryString(name, newValue))
  }

  const toggleNotInspected = () => {
    router.push(
      pathname +
        '?' +
        createQueryString('notInspected', notInspectedToday ? '' : 'true')
    )
  }

  return (
    <Card className="bg-white shadow-md">
      <CardHeader className="pb-3">
        <CardTitle className="flex items-center text-lg font-semibold">
          <Filter className="mr-2 h-5 w-5" />
          Filtres
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        <div>
          <h3 className="text-sm font-medium text-gray-900 mb-3 flex items-center">
            <CheckCircle className="mr-2 h-4 w-4" />
            État de santé
          </h3>
          <div className="space-y-2">
            {healthStatuses.map(({ value, label, icon: Icon, color }) => (
              <Button
                key={value}
                variant={currentHealth === value ? 'default' : 'outline'}
                className={`w-full justify-start ${currentHealth === value ? '' : color}`}
                onClick={() => toggleFilter('health', value)}
              >
                <Icon className="mr-2 h-4 w-4" />
                {label}
              </Button>
            ))}
          </div>
        </div>

        <div>
          <h3 className="text-sm font-medium text-gray-900 mb-3 flex items-center">
            <AlertTriangle className="mr-2 h-4 w-4" />
            Niveau de gravité
          </h3>
          <div className="space-y-2">
            {severityLevels.map(({ value, label, color }) => (
              <Button
                key={value}
                variant={currentSeverity === value ? 'default' : 'outline'}
                className={`w-full justify-start ${currentSeverity === value ? '' : color}`}
                onClick={() => toggleFilter('severity', value)}
              >
                {label}
              </Button>
            ))}
          </div>
        </div>

        <div>
          <Button
            variant={notInspectedToday ? 'default' : 'outline'}
            className="w-full justify-start"
            onClick={toggleNotInspected}
          >
            <Calendar className="mr-2 h-4 w-4" />
            Non inspectés aujourd'hui
          </Button>
        </div>
      </CardContent>
    </Card>
  )
}

=== /Users/capmission/Documents/carcheck/src/app/inventory/components/InventoryList.tsx ===
'use client'

import { useSearchParams } from 'next/navigation'
import Link from 'next/link'
import { Badge } from '@/components/ui/Badge'
import { Button } from '@/components/ui/Button'
import { Card, CardContent, CardHeader } from '@/components/ui/card'
import { getHealthStatusColor, formatDate } from '@/lib/utils'
import { ClipboardCheckIcon, WrenchIcon, AlertTriangle, Calendar } from 'lucide-react'

interface Part {
  id: string
  name: string
  status: string
  severity: string
}

interface Vehicle {
  id: string
  brand: string
  affectation: string
  healthStatus: string | null
  lastInspection: Date | null
  photo: string | null
  parts: Part[]
}

interface InventoryListProps {
  vehicles: Vehicle[]
}

export function InventoryList({ vehicles }: InventoryListProps) {
  const searchParams = useSearchParams()
  const health = searchParams.get('health')
  const severity = searchParams.get('severity')
  const notInspected = searchParams.get('notInspected') === 'true'

  const filteredVehicles = vehicles.filter(vehicle => {
    if (health && vehicle.healthStatus !== health) return false
    if (severity && !vehicle.parts.some(part => part.severity === severity)) return false
    if (notInspected) {
      const today = new Date()
      today.setHours(0, 0, 0, 0)
      if (vehicle.lastInspection && new Date(vehicle.lastInspection) >= today) return false
    }
    return true
  })

  return (
    <div className="space-y-4">
      {filteredVehicles.map((vehicle) => {
        const criticalParts = vehicle.parts.filter(part => part.severity === 'critical')
        const warningParts = vehicle.parts.filter(part => part.severity === 'high')

        return (
          <Card key={vehicle.id} className="hover:shadow-lg transition-shadow duration-200">
            <CardHeader className="pb-2">
              <div className="flex items-start justify-between">
                {vehicle.photo && (
                  <img
                    src={vehicle.photo}
                    alt={`${vehicle.brand} ${vehicle.affectation}`} // Utilisation de 'affectation' pour le texte alternatif
                    className="w-16 h-16 rounded-md object-cover mr-4"
                  />
                )}
                <div>
                  <h3 className="text-xl font-semibold text-gray-900">
                    {vehicle.brand}
                  </h3>
                  <p className="text-sm text-gray-500">{vehicle.affectation}</p>
                </div>
                <Badge className={getHealthStatusColor(vehicle.healthStatus || 'defaultStatus')}>
                  {vehicle.healthStatus}
                </Badge>
              </div>
            </CardHeader>

            <CardContent>
              <div className="space-y-4">
                <div className="flex items-center text-sm text-gray-500">
                  <Calendar className="h-4 w-4 mr-2" />
                  Dernière inspection: {vehicle.lastInspection ? formatDate(vehicle.lastInspection) : 'Non inspecté'}
                </div>

                {(criticalParts.length > 0 || warningParts.length > 0) && (
                  <div className="space-y-2">
                    {criticalParts.length > 0 && (
                      <div className="flex items-center gap-2 text-red-600">
                        <AlertTriangle className="h-4 w-4" />
                        <span className="text-sm">
                          {criticalParts.length} pièce{criticalParts.length > 1 ? 's' : ''} critique{criticalParts.length > 1 ? 's' : ''}
                        </span>
                      </div>
                    )}
                    {warningParts.length > 0 && (
                      <div className="flex items-center gap-2 text-orange-600">
                        <AlertTriangle className="h-4 w-4" />
                        <span className="text-sm">
                          {warningParts.length} pièce{warningParts.length > 1 ? 's' : ''} à surveiller
                        </span>
                      </div>
                    )}
                  </div>
                )}

                <div className="flex gap-3 pt-2">
                  <Link href={`/vehicles/${vehicle.id}`} className="flex-1">
                    <Button variant="outline" className="w-full">
                      <WrenchIcon className="h-4 w-4 mr-2" />
                      Détails
                    </Button>
                  </Link>
                  <Link href={`/inspections/new/${vehicle.id}`} className="flex-1">
                    <Button className="w-full">
                      <ClipboardCheckIcon className="h-4 w-4 mr-2" />
                      Inspecter
                    </Button>
                  </Link>
                </div>
              </div>
            </CardContent>
          </Card>
        )
      })}

      {filteredVehicles.length === 0 && (
        <Card>
          <CardContent className="flex flex-col items-center justify-center py-12">
            <AlertTriangle className="h-12 w-12 text-gray-400 mb-4" />
            <p className="text-gray-500 text-lg">Aucun véhicule ne correspond aux critères</p>
          </CardContent>
        </Card>
      )}
    </div>
  )
}

=== /Users/capmission/Documents/carcheck/src/app/inventory/page.tsx ===
import { Suspense } from 'react'
import { InventoryFilters } from './components/InventoryFilters'
import { InventoryList } from './components/InventoryList'
import { prisma } from '@/lib/prisma'

async function getInventory() {
  try {
    const vehicles = await prisma.vehicle.findMany({
      include: {
        parts: true
      },
      orderBy: {
        brand: 'asc'
      }
    })
    return vehicles
  } catch (error) {
    console.error('Error fetching vehicles:', error)
    return []
  }
}

export default async function InventoryPage() {
  const vehicles = await getInventory()

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-semibold tracking-tight">
          Vue d&apos;Inventaire
        </h1>
        <p className="text-sm text-gray-500 mt-2">
          Visualisez l&apos;état global de votre flotte de véhicules
        </p>
      </div>

      <div className="grid gap-6 lg:grid-cols-4">
        <div className="lg:col-span-1">
          <div className="bg-white shadow-sm rounded-lg p-6">
            <Suspense fallback={<div>Chargement des filtres...</div>}>
              <InventoryFilters />
            </Suspense>
          </div>
        </div>

        <div className="lg:col-span-3">
          <Suspense fallback={<div>Chargement de l&apos;inventaire...</div>}>
            <InventoryList vehicles={vehicles} />
          </Suspense>
        </div>
      </div>
    </div>
  )
}

=== /Users/capmission/Documents/carcheck/src/app/layout.tsx ===
// app/layout.tsx
'use client'

import './globals.css'
import AppLayout from '@/components/layout/AppLayout'
import NextAuthProvider from "@/components/providers/SessionProvider"

export default function RootLayout({ children }) {
  return (
    <html lang="fr">
      <body>
        <NextAuthProvider>
          <AppLayout>
            {children}
          </AppLayout>
        </NextAuthProvider>
      </body>
    </html>
  )
}

=== /Users/capmission/Documents/carcheck/src/app/loading.tsx ===
export default function Loading() {
  return (
    <div className="flex h-screen items-center justify-center">
      <div className="h-32 w-32 animate-spin rounded-full border-b-2 border-t-2 border-blue-500"></div>
    </div>
  )
}


=== /Users/capmission/Documents/carcheck/src/app/login/page.tsx ===
"use client";
import React, { useState } from 'react';
import { signIn } from 'next-auth/react';
import { Lock, UserPlus, Eye, EyeOff } from 'lucide-react';
import { useRouter } from 'next/navigation';

const LoginPage = () => {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [showPassword, setShowPassword] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const router = useRouter();

    const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setError(null);

        try {
            const result = await signIn('credentials', {
                redirect: false,
                email,
                password
            });

            if (result?.error) {
                setError('Identifiants invalides');
                return;
            }

            // Redirection après connexion réussie
            router.push('/');
        } catch (error) {
            setError('Une erreur est survenue lors de la connexion');
        }
    };

    const togglePasswordVisibility = () => {
        setShowPassword(!showPassword);
    };

    return (
        <div className="flex flex-col items-center justify-center min-h-screen bg-gradient-to-br from-primary-50 to-primary-100 p-4">
            <div className="w-full max-w-md bg-white shadow-2xl rounded-xl overflow-hidden">
                <div className="bg-primary-700 dark:bg-gray-900 text-white p-6 text-center">
                    <Lock className="mx-auto mb-4" size={48} />
                    <h1 className="text-2xl md:text-3xl font-bold">Connexion</h1>
                </div>
                <form onSubmit={handleSubmit} className="p-6 space-y-4">
                    {error && (
                        <div className="bg-red-50 border border-red-300 text-red-700 px-4 py-3 rounded relative" role="alert">
                            {error}
                        </div>
                    )}
                    <div>
                        <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-2">Email</label>
                        <input 
                            id="email"
                            type="email" 
                            value={email}
                            onChange={(e) => setEmail(e.target.value)}
                            required 
                            className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500" 
                            placeholder="votre@email.com" 
                        />
                    </div>
                    <div>
                        <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-2">Mot de passe</label>
                        <div className="relative">
                            <input 
                                id="password"
                                type={showPassword ? "text" : "password"}
                                value={password}
                                onChange={(e) => setPassword(e.target.value)}
                                required 
                                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 pr-10" 
                                placeholder="••••••••" 
                            />
                            <button
                                type="button"
                                onClick={togglePasswordVisibility}
                                className="absolute inset-y-0 right-0 flex items-center px-3 text-gray-600 hover:text-primary-600 focus:outline-none"
                                aria-label={showPassword ? "Masquer le mot de passe" : "Afficher le mot de passe"}
                            >
                                {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
                            </button>
                        </div>
                    </div>
                    <button 
                        type="submit" 
                        className="w-full bg-gray-900 text-white py-2 rounded-md hover:bg-primary-600 transition-colors duration-300 flex items-center justify-center space-x-2"
                    >
                        <Lock size={20} />
                        <span>Se connecter</span>
                    </button>
                </form>
                <div className="bg-gray-50 p-4 text-center border-t">
                    <p className="text-sm text-gray-600 mb-2">Vous n'avez pas de compte ?</p>
                    <button 
                        onClick={() => router.push('/signup')}
                        className="w-full bg-white border border-gray-900 text-gray-900 py-2 rounded-md hover:bg-primary-50 transition-colors duration-300 flex items-center justify-center space-x-2"
                    >
                        <UserPlus size={20} />
                        <span>S'inscrire</span>
                    </button>
                </div>
            </div>
        </div>
    );
};

export default LoginPage;

=== /Users/capmission/Documents/carcheck/src/app/maintenance/components/CriticalInspections.tsx ===
import { prisma } from '@/lib/prisma';
import {
  WrenchScrewdriverIcon,
  ClipboardDocumentCheckIcon,
  ExclamationTriangleIcon,
} from '@heroicons/react/24/outline';

async function getCriticalStats() {
  const [inspectionCount, criticalCount] = await Promise.all([
    prisma.inspection.count(),
    prisma.part.count({
      where: {
        severity: 'critical',
      },
    }),
  ]);

  return {
    inspectionCount,
    criticalCount,
  };
}

export default async function CriticalInspections() {
  const stats = await getCriticalStats();

  return (
    <div className="p-6">
      <h1 className="text-2xl font-semibold mb-4">Inspections Critiques</h1>

      <div className="grid grid-cols-2 gap-4">
        <div className="bg-white rounded-lg shadow p-4 text-center">
          <WrenchScrewdriverIcon className="h-8 w-8 mx-auto text-blue-500" />
          <div className="mt-2 text-2xl font-semibold">{stats.inspectionCount}</div>
          <div className="text-xs text-gray-500">Inspections Totales</div>
        </div>
        <div className="bg-white rounded-lg shadow p-4 text-center">
          <ExclamationTriangleIcon className="h-8 w-8 mx-auto text-red-500" />
          <div className="mt-2 text-2xl font-semibold">{stats.criticalCount}</div>
          <div className="text-xs text-gray-500">Pièces Critiques</div>
        </div>
      </div>

      {/* Alertes critiques */}
      {stats.criticalCount > 0 && (
        <div className="space-y-4 mt-4">
          <h2 className="text-lg font-semibold">Alertes critiques</h2>
          <div className="bg-red-50 border-l-4 border-red-500 p-4">
            <div className="flex">
              <ExclamationTriangleIcon className="h-6 w-6 text-red-500" />
              <div className="ml-3">
                <p className="text-sm text-red-700">
                  {stats.criticalCount} pièce{stats.criticalCount > 1 ? 's' : ''} critique{stats.criticalCount > 1 ? 's' : ''} nécessite{stats.criticalCount > 1 ? 'nt' : ''} une attention immédiate.
                </p>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

=== /Users/capmission/Documents/carcheck/src/app/maintenance/components/MaintenanceTasks.tsx ===
// src/app/maintenance/components/MaintenanceTasks.tsx
'use client'

import { useState, useEffect } from 'react'
import { MaintenanceTaskForm } from '@/components/maintenance/MaintenanceTaskForm'
import { MaintenanceTask, Inspection, MaintenanceTaskFormData } from '@/types/models'
import MaintenanceTaskList from '@/components/maintenance/MaintenanceTaskList'

export default function MaintenanceTasks() {
  const [tasks, setTasks] = useState<MaintenanceTask[]>([])
  const [inspections, setInspections] = useState<Inspection[]>([])

  useEffect(() => {
    fetchTasks()
    fetchInspections()
  }, [])

  const fetchTasks = async () => {
    const response = await fetch('/api/maintenance')
    const data = await response.json()
    setTasks(data)
  }

  const fetchInspections = async () => {
    const response = await fetch('/api/inspections')
    const data = await response.json()
    setInspections(data)
  }

  const handleSubmit = async (formData: MaintenanceTaskFormData, inspectionId: string) => {
    const inspection = inspections.find(i => i.id === inspectionId)
    if (!inspection) return

    const task = {
      vehicleId: inspection.vehicle.id,
      inspectionId: inspection.id,
      ...formData,
    }

    const response = await fetch('/api/maintenance', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(task),
    })

    if (response.ok) {
      fetchTasks()
    }
  }

  return (
    <div className="space-y-6">
      <MaintenanceTaskForm 
        inspections={inspections}
        onSubmit={handleSubmit}
      />
      <MaintenanceTaskList tasks={tasks} />
    </div>
  )
}


=== /Users/capmission/Documents/carcheck/src/app/maintenance/new/page.tsx ===
import Header from '@/components/layout/Header'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { MaintenanceTaskForm } from '@/components/maintenance/MaintenanceTaskForm'

export default function NewMaintenancePage() {
  return (
    <>
      <Header 
        title="Nouvelle tâche de maintenance"
        showBack
      />
      
      <div className="p-4">
        <div className="max-w-3xl mx-auto">
          <Card>
            <CardHeader>
              <CardTitle>Créer une nouvelle tâche</CardTitle>
            </CardHeader>
            <CardContent>
              <MaintenanceTaskForm />
            </CardContent>
          </Card>
        </div>
      </div>
    </>
  )
}

=== /Users/capmission/Documents/carcheck/src/app/maintenance/page.tsx ===
// app/maintenance/page.tsx
import CriticalInspections from './components/CriticalInspections'
import MaintenanceTasks from './components/MaintenanceTasks'
import { protectedRoute } from "@/lib/protectedRoute"
import AddButton from '@/components/ui/AddButton'
import MaintenanceOverview from '@/components/dashboards/MaintenanceDashboard'

export default async function MaintenancePage() {
  const session = await protectedRoute(['Maintenance', 'Safety'])
  const isMaintenance = session.user.role === 'Maintenance'

  return (
    <div className="space-y-6">
      {isMaintenance && (
        <AddButton 
          href="/maintenance/new" 
          label="Ajouter une tâche" 
        />
      )}
      <CriticalInspections />
      <MaintenanceOverview />
      <MaintenanceTasks />
    </div>
  )
}

=== /Users/capmission/Documents/carcheck/src/app/metadata.tsx ===
// src/app/metadata.tsx
import type { Metadata } from 'next';

export type ExtendedMetadata = Metadata & {
  jsonLd?: {
    '@context': string;
    '@type': string;
    name: string;
    url: string;
    description: string;
    image: string;
    potentialAction: {
      '@type': string;
      target: string;
      'query-input': string;
    };
  };
};

export const metadata: ExtendedMetadata = {
  title: 'CarCheck',
  description: 'Application de suivi des véhicules',
  keywords: 'véhicules, entretien, inspections, suivi, CarCheck',
  authors: [{ name: 'Votre Nom', url: 'https://votre-site.com' }],
  openGraph: {
    title: 'CarCheck',
    description: 'Application de suivi des véhicules',
    url: 'https://votre-site.com', // Remplacez par l'URL de votre site
    siteName: 'CarCheck',
    images: [
      {
        url: 'https://votre-site.com/image.jpg', // Remplacez par l'URL de votre image
        width: 800,
        height: 600,
        alt: 'Image de CarCheck',
      },
    ],
    locale: 'fr_FR',
    type: 'website',
  },
  twitter: {
    card: 'summary_large_image',
    title: 'CarCheck',
    description: 'Application de suivi des véhicules',
    images: 'https://votre-site.com/image.jpg', // Remplacez par l'URL de votre image
  },
  // Ajout de balisage Schema.org
  alternates: {
    canonical: 'https://votre-site.com', // Remplacez par l'URL canonique de votre site
  },
  // Balisage JSON-LD pour Schema.org
  jsonLd: {
    '@context': 'https://schema.org',
    '@type': 'WebSite',
    name: 'CarCheck',
    url: 'https://votre-site.com', // Remplacez par l'URL de votre site
    description: 'Application de suivi des véhicules',
    image: 'https://votre-site.com/image.jpg', // Remplacez par l'URL de votre image
    potentialAction: {
      '@type': 'SearchAction',
      target: 'https://votre-site.com/?s={search_term_string}',
      'query-input': 'required name=search_term_string',
    },
  },
};

=== /Users/capmission/Documents/carcheck/src/app/not-found.tsx ===
import Link from 'next/link'

export default function NotFound() {
  return (
    <div className="flex h-screen flex-col items-center justify-center">
      <div className="rounded-lg bg-white p-8 text-center shadow-xl">
        <h2 className="mb-4 text-2xl font-bold text-gray-800">
          Page non trouvée
        </h2>
        <p className="mb-4 text-gray-600">
          Désolé, la page que vous recherchez n'existe pas.
        </p>
        <Link
          href="/"
          className="btn btn-primary"
        >
          Retour à l'accueil
        </Link>
      </div>
    </div>
  )
}


=== /Users/capmission/Documents/carcheck/src/app/page.tsx ===
"use client"

import { useSession } from "next-auth/react"
import { Role } from "@prisma/client"
import AdminDashboard from "@/components/dashboards/SafetyDashboard"
import MaintenanceDashboard from "@/components/dashboards/MaintenanceDashboard"
import InspecteurDashboard from "@/components/dashboards/InspecteurDashboard"
import LoginPage from "./login/page"

export default function Home() {
  const { data: session, status } = useSession()

  if (status === "loading") {
    return <div>Chargement...</div>
  }

  if (status === "unauthenticated") {
    return <LoginPage />
  }

  switch(session?.user?.role) {
    case 'Safety':
      return <InspecteurDashboard />
    case 'Maintenance':
      return <MaintenanceDashboard />
    case 'Inspecteur':
      return <InspecteurDashboard />
    default:
      return <div>Accès non autorisé</div>
  }
}

=== /Users/capmission/Documents/carcheck/src/app/reports/components/GenerateReport.tsx ===
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Checkbox } from '@/components/ui/checkbox';
import { Button } from '@/components/ui/button';
import { FileText, Mail, Download } from 'lucide-react';

const ReportGenerator = () => {
  const [selectedSections, setSelectedSections] = React.useState([]);
  const [generating, setGenerating] = React.useState(false);

  const reportSections = [
    {
      id: 'daily-inspections',
      title: 'Inspections de la journée',
      description: 'Résumé des inspections effectuées aujourd'hui'
    },
    {
      id: 'critical-vehicles',
      title: 'Véhicules critiques',
      description: 'Liste des véhicules présentant des défauts critiques'
    },
    {
      id: 'healthy-vehicles',
      title: 'Véhicules en bon état',
      description: 'Liste des véhicules sans défaut majeur'
    },
    {
      id: 'maintenance',
      title: 'Véhicules en maintenance',
      description: 'Liste des véhicules actuellement en maintenance'
    },
  ];

  const handleGenerateReport = async () => {
    if (selectedSections.length === 0) return;
    
    setGenerating(true);
    try {
      const response = await fetch('/api/reports', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ sections: selectedSections }),
      });
      
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'report.pdf';
      document.body.appendChild(a);
      a.click();
      a.remove();
    } catch (error) {
      console.error('Error generating report:', error);
    } finally {
      setGenerating(false);
    }
  };

  const handleSendEmail = async () => {
    if (selectedSections.length === 0) return;
    
    setGenerating(true);
    try {
      await fetch('/api/reports/email', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ sections: selectedSections }),
      });
    } catch (error) {
      console.error('Error sending report:', error);
    } finally {
      setGenerating(false);
    }
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Générer un rapport</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {reportSections.map((section) => (
              <div key={section.id} className="flex items-center space-x-2">
                <Checkbox
                  id={section.id}
                  checked={selectedSections.includes(section.id)}
                  onCheckedChange={(checked) => {
                    setSelectedSections(prev =>
                      checked
                        ? [...prev, section.id]
                        : prev.filter(id => id !== section.id)
                    );
                  }}
                />
                <div className="grid gap-1.5 leading-none">
                  <label
                    htmlFor={section.id}
                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                  >
                    {section.title}
                  </label>
                  <p className="text-sm text-gray-500">
                    {section.description}
                  </p>
                </div>
              </div>
            ))}
          </div>

          <div className="flex space-x-4 mt-6">
            <Button
              onClick={handleGenerateReport}
              disabled={generating || selectedSections.length === 0}
            >
              <FileText className="w-4 h-4 mr-2" />
              Générer PDF
            </Button>
            <Button
              onClick={handleSendEmail}
              disabled={generating || selectedSections.length === 0}
              variant="outline"
            >
              <Mail className="w-4 h-4 mr-2" />
              Envoyer par email
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default ReportGenerator;

=== /Users/capmission/Documents/carcheck/src/app/reports/page.tsx ===
// app/reports/page.tsx
import { ReportGenerator } from '@/components/dashboards/ReportGenerator';

export default function ReportsPage() {
  return (
    <div className="container mx-auto py-6">
      <h1 className="text-2xl font-bold mb-6">Génération de rapports</h1>
      <ReportGenerator />
    </div>
  );
}

=== /Users/capmission/Documents/carcheck/src/app/settings/checkin/CheckInItemList.tsx ===
'use client'

import { useState } from 'react'
import { Switch } from '@/components/ui/Switch'
import { Button } from '@/components/ui/Button'
import type { CheckInItem } from '@prisma/client'

interface CheckInItemListProps {
  items: CheckInItem[]
}

export function CheckInItemList({ items }: CheckInItemListProps) {
  const [expandedCategories, setExpandedCategories] = useState<string[]>([])

  const categories = Array.from(new Set(items.map((item) => item.category)))

  const toggleCategory = (category: string) => {
    setExpandedCategories((prev) =>
      prev.includes(category)
        ? prev.filter((c) => c !== category)
        : [...prev, category]
    )
  }

  const toggleItemStatus = async (item: CheckInItem) => {
    try {
      const response = await fetch(`/api/settings/checkin/${item.id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          isActive: !item.isActive,
        }),
      })

      if (!response.ok) {
        throw new Error('Failed to update item status')
      }

      // Rafraîchir la page pour voir les changements
      window.location.reload()
    } catch (error) {
      console.error('Error updating item status:', error)
      alert('Une erreur est survenue lors de la mise à jour')
    }
  }

  const deleteItem = async (item: CheckInItem) => {
    if (item.isDefault) {
      alert('Les éléments standards ne peuvent pas être supprimés')
      return
    }

    if (!confirm('Êtes-vous sûr de vouloir supprimer cet élément ?')) {
      return
    }

    try {
      const response = await fetch(`/api/settings/checkin/${item.id}`, {
        method: 'DELETE',
      })

      if (!response.ok) {
        throw new Error('Failed to delete item')
      }

      // Rafraîchir la page pour voir les changements
      window.location.reload()
    } catch (error) {
      console.error('Error deleting item:', error)
      alert('Une erreur est survenue lors de la suppression')
    }
  }

  return (
    <div className="divide-y">
      {categories.map((category) => (
        <div key={category} className="p-4">
          <button
            onClick={() => toggleCategory(category)}
            className="w-full flex items-center justify-between text-left"
          >
            <h3 className="text-lg font-medium">{category}</h3>
            <span className="text-gray-500">
              {expandedCategories.includes(category) ? '▼' : '▶'}
            </span>
          </button>

          {expandedCategories.includes(category) && (
            <div className="mt-4 space-y-4">
              {items
                .filter((item) => item.category === category)
                .map((item) => (
                  <div
                    key={item.id}
                    className="flex items-center justify-between py-2"
                  >
                    <div className="flex items-center space-x-4">
                      {item.icon && (
                        <span className="text-xl">{item.icon}</span>
                      )}
                      <div>
                        <h4 className="font-medium">{item.name}</h4>
                        {item.description && (
                          <p className="text-sm text-gray-500">
                            {item.description}
                          </p>
                        )}
                        {item.isDefault && (
                          <span className="inline-flex items-center rounded-full bg-blue-50 px-2 py-1 text-xs font-medium text-blue-700 mt-1">
                            Standard
                          </span>
                        )}
                        {item.isRequired && (
                          <span className="inline-flex items-center rounded-full bg-red-50 px-2 py-1 text-xs font-medium text-red-700 mt-1 ml-2">
                            Obligatoire
                          </span>
                        )}
                      </div>
                    </div>

                    <div className="flex items-center space-x-4">
                      <Switch
                        checked={item.isActive}
                        onCheckedChange={() => toggleItemStatus(item)}
                      />
                      {!item.isDefault && (
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => deleteItem(item)}
                        >
                          Supprimer
                        </Button>
                      )}
                    </div>
                  </div>
                ))}
            </div>
          )}
        </div>
      ))}
    </div>
  )
}


=== /Users/capmission/Documents/carcheck/src/app/settings/checkin/CreateCheckInItem.tsx ===
'use client'

import { useState } from 'react'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'
import { Button } from '@/components/ui/Button'

const schema = z.object({
  name: z.string().min(1, 'Le nom est requis'),
  description: z.string().optional(),
  icon: z.string().optional(),
  category: z.string().min(1, 'La catégorie est requise'),
  isRequired: z.boolean().default(false),
})

type FormData = z.infer<typeof schema>

const categories = [
  'Fluides',
  'Sécurité',
  'Éclairage',
  'Freins',
  'Contrôles',
  'Visibilité',
  'Équipement',
  'État général',
]

export function CreateCheckInItem() {
  const [isOpen, setIsOpen] = useState(false)
  const [isSubmitting, setIsSubmitting] = useState(false)

  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm<FormData>({
    resolver: zodResolver(schema),
  })

  const onSubmit = async (data: FormData) => {
    try {
      setIsSubmitting(true)
  
      // Ajout de l'heure locale au moment de la soumission
      const currentTime = new Date().toISOString();
      console.log('Current local time:', currentTime);
  
      const response = await fetch('/api/settings/checkin', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({...data, submittedAt: currentTime}), // Inclure l'heure de soumission
      })
  
      if (!response.ok) {
        throw new Error('Failed to create check-in item')
      }
  
      // Réinitialiser le formulaire et fermer le modal
      reset()
      setIsOpen(false)
  
      // Rafraîchir la page pour voir les changements
      window.location.reload()
    } catch (error) {
      console.error('Error creating check-in item:', error)
      alert('Une erreur est survenue lors de la création')
    } finally {
      setIsSubmitting(false)
    }
  }

  return (
    <div>
      <Button onClick={() => setIsOpen(!isOpen)}>
        {isOpen ? 'Annuler' : 'Ajouter un élément'}
      </Button>

      {isOpen && (
        <div className="mt-4 bg-white shadow rounded-lg p-4">
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Nom
              </label>
              <input
                type="text"
                {...register('name')}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
              />
              {errors.name && (
                <p className="mt-1 text-sm text-red-600">{errors.name.message}</p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                Description
              </label>
              <textarea
                {...register('description')}
                rows={2}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                Icône
              </label>
              <input
                type="text"
                {...register('icon')}
                placeholder="🔧"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                Catégorie
              </label>
              <select
                {...register('category')}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
              >
                <option value="">Sélectionner une catégorie</option>
                {categories.map((category) => (
                  <option key={category} value={category}>
                    {category}
                  </option>
                ))}
              </select>
              {errors.category && (
                <p className="mt-1 text-sm text-red-600">
                  {errors.category.message}
                </p>
              )}
            </div>

            <div className="flex items-center">
              <input
                type="checkbox"
                {...register('isRequired')}
                className="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
              />
              <label className="ml-2 block text-sm text-gray-900">
                Élément obligatoire
              </label>
            </div>

            <div className="flex justify-end space-x-3">
              <Button
                type="button"
                variant="outline"
                onClick={() => setIsOpen(false)}
              >
                Annuler
              </Button>
              <Button type="submit" disabled={isSubmitting}>
                {isSubmitting ? 'Création...' : 'Créer'}
              </Button>
            </div>
          </form>
        </div>
      )}
    </div>
  )
}


=== /Users/capmission/Documents/carcheck/src/app/settings/checkin/page.tsx ===
import Header from '@/components/layout/Header';
import { prisma } from '@/lib/prisma';
import { CheckInItemList } from './CheckInItemList';
import { CreateCheckInItem } from './CreateCheckInItem';

export default async function CheckInSettingsPage() {
  const checkInItems = await prisma.checkInItem.findMany({
    orderBy: [
      {
        category: 'asc',
      },
      {
        name: 'asc',
      },
    ],
  });

  return (
    <>
      <Header
        title="Éléments d'inspection"
        description="Gérez la liste des éléments à vérifier lors des inspections quotidiennes."
      />

      <div className="p-4">
        <div className="max-w-7xl mx-auto space-y-6">
          <CreateCheckInItem />

          <div className="bg-white shadow rounded-lg">
            <div className="p-4 border-b">
              <h2 className="text-lg font-medium">Liste des éléments d'inspection</h2>
              <p className="text-sm text-gray-500">
                Les éléments standards ne peuvent pas être supprimés mais peuvent être
                désactivés si vous ne souhaitez pas les utiliser.
              </p>
            </div>
            <CheckInItemList items={checkInItems} />
          </div>
        </div>
      </div>
    </>
  );
}


=== /Users/capmission/Documents/carcheck/src/app/settings/me/page.tsx ===
"use client";

import { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import { Camera, Mail, User as UserIcon, BadgeCheck, Building, Phone, ChevronRight } from 'lucide-react';
import { User } from '@/types';
import { Badge } from '@/components/ui/Badge';
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';
import { CardHeader, CardTitle } from '@/components/ui/card';

export default function ProfileSettings() {
  const { data: session } = useSession();
  const [editMode, setEditMode] = useState<string | null>(null);

  type FormDataType = {
    name: string;
    email: string;
    badge: string;
    department: string;
    phone: string;
    photo: File | null;
  };

  const [formData, setFormData] = useState<FormDataType>({
    name: '',
    email: '',
    badge: '',
    department: '',
    phone: '',
    photo: null,
  });
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [message, setMessage] = useState('');

  useEffect(() => {
    if (session?.user) {
      const user = session.user as User;
      setFormData({
        name: `${user.firstName} ${user.lastName}` || '',
        email: user.email || '',
        badge: user.badge || '',
        department: user.department || '',
        phone: user.phone || '',
        photo: null,
      });
      setPreviewUrl(user.photo || null);
    }
  }, [session]);

  const handlePhotoChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setFormData({ ...formData, photo: file });
      const reader = new FileReader();
      reader.onloadend = () => {
        setPreviewUrl(reader.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleSubmit = async (field: keyof FormDataType) => {
    setIsLoading(true);
    setMessage('');

    try {
        const formDataToSend = new FormData();
        formDataToSend.append(field, formData[field]);

        const response = await fetch('/api/users/me', {
            method: 'PUT',
            body: formDataToSend,
        });

        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.message || 'Erreur lors de la mise à jour');
        }

        const updatedUser = await response.json();
        // Mettre à jour le state local avec les nouvelles données
        setFormData(prev => ({
            ...prev,
            [field]: updatedUser[field]
        }));

        setMessage(`${field} mis à jour avec succès`);
        setEditMode(null);
    } catch (error) {
        setMessage(error instanceof Error ? error.message : 'Erreur lors de la mise à jour');
    } finally {
        setIsLoading(false);
    }
};


  const fields = [
    { id: 'name', title: 'Nom complet', icon: UserIcon },
    { id: 'email', title: 'Email', icon: Mail, type: 'email' },
    { id: 'badge', title: 'Badge', icon: BadgeCheck },
    { id: 'department', title: 'Département', icon: Building },
    { id: 'phone', title: 'Téléphone', icon: Phone, type: 'tel' },
  ];

  return (
    <div>
      <CardHeader>
        <CardTitle className="text-lg font-medium">
          Gérez vos informations personnelles
        </CardTitle>
      </CardHeader>

      <div className="divide-y divide-gray-200 bg-white rounded-lg shadow">
        {/* Photo de profil */}
        <div className="flex items-center gap-4 px-4 py-4 hover:bg-gray-50">
          <div className="relative">
            <div className="w-16 h-16 rounded-full overflow-hidden bg-gray-100">
              {previewUrl ? (
                <img src={previewUrl} alt="Profile" className="w-full h-full object-cover" />
              ) : (
                <div className="w-full h-full flex items-center justify-center">
                  <UserIcon className="w-8 h-8 text-gray-400" />
                </div>
              )}
            </div>
            <label htmlFor="photo-upload" className="absolute bottom-0 right-0 p-1 bg-white rounded-full shadow-lg cursor-pointer hover:bg-gray-50">
              <Camera className="w-4 h-4 text-gray-600" />
              <input id="photo-upload" type="file" accept="image/*" className="hidden" onChange={handlePhotoChange} />
            </label>
          </div>
          <div>
            <h3 className="font-medium text-gray-900">Photo de profil</h3>
            <p className="text-sm text-gray-500">JPG, GIF ou PNG. Max 2MB</p>
          </div>
        </div>

        {/* Champs du profil */}
        {fields.map((field) => {
          const Icon = field.icon;
          const isEditing = editMode === field.id;

          return (
            <div key={field.id} className="px-4 py-4 flex items-center hover:bg-gray-50">
              <div className="p-2 rounded-lg bg-gray-100">
                <Icon className="h-5 w-5 text-gray-500" />
              </div>
              <div className="ml-4 flex-grow">
                <h3 className="font-medium text-gray-900">{field.title}</h3>
                {isEditing ? (
                  <div className="mt-2">
                    <Input
                      type={field.type || 'text'}
                      value={formData[field.id as keyof FormDataType]}
                      onChange={(e) => setFormData({ ...formData, [field.id]: e.target.value })}
                      className="max-w-md"
                    />
                    <div className="mt-2 flex gap-2">
                      <Button variant="outline" size="sm" onClick={() => setEditMode(null)}>
                        Annuler
                      </Button>
                      <Button size="sm" onClick={() => {
                        if (field.id !== null) {
                          handleSubmit(field.id);
                        } else {
                          setMessage('Erreur : le champ est null');
                        }
                      }} disabled={isLoading}>
                        Sauvegarder
                      </Button>
                    </div>
                  </div>
                ) : (
                  <p className="text-gray-600">{formData[field.id as keyof FormDataType]}</p>
                )}
              </div>
              {!isEditing && (
                <div className="flex items-center">
                  <Badge variant="outline" className="mr-4">
                    {formData[field.id as keyof FormDataType] ? 'À jour' : 'Non renseigné'}
                  </Badge>
                  <Button variant="ghost" size="sm" onClick={() => setEditMode(field.id)}>
                    <ChevronRight className="h-5 w-5 text-gray-400" />
                  </Button>
                </div>
              )}
            </div>
          );
        })}
      </div>

      {message && (
        <div className={`mt-4 p-4 rounded-md ${
          message.includes('Erreur') ? 'bg-red-50 text-red-600' : 'bg-green-50 text-green-600'
        }`}>
          {message}
        </div>
      )}
    </div>
  );
}

=== /Users/capmission/Documents/carcheck/src/app/settings/page.tsx ===
"use client";

import { Cog, User, ClipboardCheck, LogOut, ChevronRightIcon } from 'lucide-react';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { signOut } from 'next-auth/react';
import { Badge } from '@/components/ui/Badge';
import { CardHeader, CardTitle } from '@/components/ui/card';

const settingsSections = [
  {
    id: 'profile',
    label: 'Mon Profil',
    href: '/settings/me',
    icon: User,
    status: 'default',
    statusText: 'À jour',
  },
  {
    id: 'checkin',
    label: 'Pièces',
    href: '/settings/checkin',
    icon: ClipboardCheck,
    status: 'default',
    statusText: 'OK',
  },
  {
    id: 'preferences',
    label: 'Préférences',
    href: '/settings/preferences',
    icon: Cog,
    status: 'default',
    statusText: 'OK',
  },
];

export default function SettingsLayout() {
  const pathname = usePathname();

  return (
    <div>
      <CardHeader>
        <CardTitle className="text-lg font-medium">
          Gérez vos préférences et paramètres
        </CardTitle>
      </CardHeader>
      <div className="divide-y divide-gray-200">
        {settingsSections.map((section) => {
          const Icon = section.icon;
          const isActive = pathname === section.href;

          return (
            <Link
              key={section.id}
              href={section.href}
              className="block hover:bg-gray-50"
            >
              <div className="px-4 py-4 flex ">
                <div className={`p-2 rounded-lg ${
                  isActive ? 'bg-blue-100' : 'bg-gray-100'
                }`}>
                  <Icon className={`h-5 w-5 ${
                    isActive ? 'text-blue-500' : 'text-gray-500'
                  }`} />
                </div>
                <div className="ml-4 flex-grow">
                  <h3 className="text-base font-semibold text-gray-900">
                    {section.label}
                  </h3>
                </div>
                <div className="flex items-center">
                  <Badge variant={section.status}>
                    {section.statusText}
                  </Badge>
                  <ChevronRightIcon className="ml-4 h-5 w-5 text-gray-400" />
                </div>
              </div>
            </Link>
          );
        })}

        <button
          onClick={() => signOut()}
          className="w-full"
        >
          <div className="px-4 py-4 flex items-center hover:bg-red-50">
            <div className="p-2 rounded-lg bg-red-100">
              <LogOut className="h-5 w-5 text-red-500" />
            </div>
            <div className="ml-4 flex-grow">
              <h3 className="text-base font-semibold text-red-600">
                Déconnexion
              </h3>
            </div>
            <div className="flex items-center">
              <ChevronRightIcon className="h-5 w-5 text-red-400" />
            </div>
          </div>
        </button>
      </div>
    </div>
  );
}

=== /Users/capmission/Documents/carcheck/src/app/settings/preferences/page.tsx ===
'use client';

import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Label } from '@/components/ui/Label';
import { Switch } from '@/components/ui/Switch';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

export default function PreferencesSettings() {
  const [preferences, setPreferences] = useState({
    language: 'fr',
    theme: 'light',
    notifications: true,
    emailNotifications: true,
  });

  const handlePreferenceChange = (key: string, value: any) => {
    setPreferences((prev) => ({ ...prev, [key]: value }));
    // Ici, vous pouvez ajouter la logique pour sauvegarder les préférences
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Préférences</CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Langue */}
        <div className="space-y-2">
          <Label>Langue</Label>
          <Select
            value={preferences.language}
            onValueChange={(value) => handlePreferenceChange('language', value)}
          >
            <SelectTrigger>
              <SelectValue placeholder="Sélectionner une langue" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="fr">Français</SelectItem>
              <SelectItem value="en">English</SelectItem>
            </SelectContent>
          </Select>
        </div>

        {/* Thème */}
        <div className="space-y-2">
          <Label>Thème</Label>
          <Select
            value={preferences.theme}
            onValueChange={(value) => handlePreferenceChange('theme', value)}
          >
            <SelectTrigger>
              <SelectValue placeholder="Sélectionner un thème" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="light">Clair</SelectItem>
              <SelectItem value="dark">Sombre</SelectItem>
              <SelectItem value="system">Système</SelectItem>
            </SelectContent>
          </Select>
        </div>

        {/* Notifications */}
        <div className="flex items-center justify-between">
          <div>
            <Label>Notifications</Label>
            <p className="text-sm text-gray-500">
              Recevoir des notifications pour les inspections et les alertes
            </p>
          </div>
          <Switch
            checked={preferences.notifications}
            onCheckedChange={(checked) => handlePreferenceChange('notifications', checked)}
          />
        </div>

        {/* Notifications par email */}
        <div className="flex items-center justify-between">
          <div>
            <Label>Notifications par email</Label>
            <p className="text-sm text-gray-500">
              Recevoir des rapports et alertes par email
            </p>
          </div>
          <Switch
            checked={preferences.emailNotifications}
            onCheckedChange={(checked) => handlePreferenceChange('emailNotifications', checked)}
          />
        </div>
      </CardContent>
    </Card>
  );
}

=== /Users/capmission/Documents/carcheck/src/app/signup/page.tsx ===
"use client";
import React, { useState } from 'react';
import { UserPlus, LogIn, Users, Eye, EyeOff } from 'lucide-react';
import { useRouter } from 'next/navigation'; // Importez useRouter pour la redirection
import { z } from 'zod';

const signupSchema = z.object({
    firstName: z.string().min(1, 'Prénom requis'),
    lastName: z.string().min(1, 'Nom requis'),
    email: z.string().email('Email invalide'),
    password: z.string().min(6, 'Le mot de passe doit comporter au moins 6 caractères'),
    role: z.enum(['Inspecteur', 'Maintenance', 'Safety']),
});

const SignupPage = () => {
    const [error, setError] = useState<string | null>(null);
    const [showPassword, setShowPassword] = useState(false);
    const router = useRouter(); // Utilisez useRouter pour la redirection

    const togglePasswordVisibility = () => {
        setShowPassword(!showPassword);
    };

    const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        setError(null); // Réinitialiser l'erreur

        const formData = new FormData(event.currentTarget);
        const data = Object.fromEntries(formData);

        try {
            signupSchema.parse(data); // Validation des données

            const response = await fetch('/api/users/signup', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
            });

            const responseData = await response.json(); // Récupérer la réponse JSON

            if (!response.ok) {
                // Si la réponse n'est pas OK, afficher le message d'erreur
                throw new Error(responseData.error || 'Erreur lors de la création du compte.');
            }

            // Redirection vers la page d'accueil après une inscription réussie
            router.push('/'); // Remplacez '/' par le chemin de votre page d'accueil
        } catch (error) {
            if (error instanceof z.ZodError) {
                setError(error.errors[0].message); // Afficher le message de validation
            } else {
                setError(error instanceof Error ? error.message : 'Une erreur est survenue');
            }
        }
    };

    return (
        <div className="flex flex-col items-center justify-center min-h-screen bg-gradient-to-br from-primary-50 to-primary-100 p-4">
            <div className="w-full max-w-md bg-white shadow-2xl rounded-xl overflow-hidden">
                <div className="bg-gray-900 text-white p-6 text-center">
                    <UserPlus className="mx-auto mb-4" size={48} />
                    <h1 className="text-2xl md:text-3xl font-bold">Créer un compte</h1>
                </div>
                <form onSubmit={handleSubmit} className="p-6 space-y-4">
                    {error && (
                        <div className="bg-red-50 border border-red-300 text-red-700 px-4 py-3 rounded relative" role="alert">
                            {error}
                        </div>
                    )}
                    <div>
                        <label htmlFor="firstName" className="block text-sm font-medium text-gray-700 mb-2">Prénom</label>
                        <input 
                            id="firstName"
                            type="text" 
                            name="firstName" 
                            required 
                            className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500" 
                            placeholder="Votre prénom" 
                        />
                    </div>
                    <div>
                        <label htmlFor="lastName" className="block text-sm font-medium text-gray-700 mb-2">Nom</label>
                        <input 
                            id="lastName"
                            type="text" 
                            name="lastName" 
                            required 
                            className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500" 
                            placeholder="Votre nom" 
                        />
                    </div>
                    <div>
                        <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-2">Email</label>
                        <input 
                            id="email"
                            type="email" 
                            name="email" 
                            required 
                            className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500" 
                            placeholder="votre@email.com" 
                        />
                    </div>
                    <div>
                        <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-2">Mot de passe</label>
                        <div className="relative">
                            <input 
                                id="password"
                                type={showPassword ? "text" : "password"}
                                name="password" 
                                required 
                                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 pr-10" 
                                placeholder="••••••••" 
                            />
                            <button
                                type="button"
                                onClick={togglePasswordVisibility}
                                className="absolute inset-y-0 right-0 flex items-center px-3 text-gray-600 hover:text-primary-600 focus:outline-none"
                                aria-label={showPassword ? "Masquer le mot de passe" : "Afficher le mot de passe"}
                            >
                                {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
                            </button>
                        </div>
                    </div>
                    <div>
                        <label htmlFor="role" className="block text-sm font-medium text-gray-700 mb-2">Équipe</label>
                        <div className="relative">
                            <select 
                                id="role"
                                name="role" 
                                required 
                                className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-primary-500 focus:border-primary-500 appearance-none"
                            >
                                <option value="" disabled>Choisir une équipe</option>
                                <option value="Inspecteur">Inspecteur</option>
                                <option value="Maintenance">Maintenance</option>
                                <option value="Safety">Safety</option>
                            </select>
                            <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                                <Users size={20} />
                            </div>
                        </div>
                    </div>
                    <button 
                        type="submit" 
                        className="w-full bg-gray-900 text-white py-2 rounded-md hover:bg-primary-600 transition-colors duration-300 flex items-center justify-center space-x-2"
                    >
                        <UserPlus size={20} />
                        <span>Créer un compte</span>
                    </button>
                </form>
                <div className="bg-gray-50 p-4 text-center border-t">
                    <p className="text-sm text-gray-600 mb-2">Vous avez déjà un compte ?</p>
                    <button 
                        onClick={() => window.location.href = '/login'}
                        className="w-full bg-white border border-gray-900 text-gray-900 py-2 rounded-md hover:bg-primary-50 transition-colors duration-300 flex items-center justify-center space-x-2"
                    >
                        <LogIn size={20} />
                        <span>Se connecter</span>
                    </button>
                </div>
            </div>
        </div>
    );
};

export default SignupPage;

=== /Users/capmission/Documents/carcheck/src/app/vehicles/[id]/checkin/CheckInForm.tsx ===
'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { CheckInGrid } from '@/components/checkin/CheckInGrid'
import { Button } from '@/components/ui/Button'
import type { CheckInItem } from '@prisma/client'

type CheckInItemWithStatus = CheckInItem & {
  status?: string
  severity?: string
  description?: string
}

interface CheckInFormProps {
  vehicleId: string
  items: CheckInItemWithStatus[]
}

export function CheckInForm({ vehicleId, items }: CheckInFormProps) {
  const router = useRouter()
  const [step, setStep] = useState(1)
  const [selectedItems, setSelectedItems] = useState<string[]>([])
  const [itemDetails, setItemDetails] = useState<Record<string, {
    severity: string
    description: string
  }>>({})
  const [isSubmitting, setIsSubmitting] = useState(false)

  const handleItemSelect = (item: CheckInItemWithStatus) => {
    setSelectedItems((prev) =>
      prev.includes(item.id)
        ? prev.filter((id) => id !== item.id)
        : [...prev, item.id]
    )
  }

  const handleSeverityChange = (itemId: string, severity: string) => {
    setItemDetails((prev) => ({
      ...prev,
      [itemId]: {
        ...prev[itemId],
        severity,
      },
    }))
  }

  const handleDescriptionChange = (itemId: string, description: string) => {
    setItemDetails((prev) => ({
      ...prev,
      [itemId]: {
        ...prev[itemId],
        description,
      },
    }))
  }

  const handleSubmit = async () => {
    try {
      setIsSubmitting(true)

      // Préparer les données pour l'API
      const updates = items.map((item) => ({
        itemId: item.id,
        status: selectedItems.includes(item.id) ? 'warning' : 'ok',
        severity: selectedItems.includes(item.id)
          ? itemDetails[item.id]?.severity || 'low'
          : null,
        description: selectedItems.includes(item.id)
          ? itemDetails[item.id]?.description || ''
          : null,
      }))

      // Envoyer les données à l'API
      const response = await fetch(`/api/vehicles/${vehicleId}/checkin`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ updates }),
      })

      if (!response.ok) {
        throw new Error('Erreur lors de la mise à jour')
      }

      router.refresh()
      router.push(`/vehicles/${vehicleId}`)
    } catch (error) {
      console.error('Error updating check-in:', error)
      alert('Une erreur est survenue lors de la mise à jour')
    } finally {
      setIsSubmitting(false)
    }
  }

  const renderStep = () => {
    switch (step) {
      case 1:
        return (
          <div className="space-y-6">
            <div className="bg-blue-50 p-4 rounded-lg">
              <p className="text-sm text-blue-700">
                Sélectionnez les éléments présentant un problème. Les éléments non
                sélectionnés seront considérés comme étant en bon état.
              </p>
            </div>
            <CheckInGrid
              items={items}
              onItemSelect={handleItemSelect}
              selectedItems={selectedItems}
            />
            <div className="flex justify-end">
              <Button onClick={() => setStep(2)} disabled={selectedItems.length === 0}>
                Continuer
              </Button>
            </div>
          </div>
        )

      case 2:
        return (
          <div className="space-y-6">
            <div className="bg-yellow-50 p-4 rounded-lg">
              <p className="text-sm text-yellow-700">
                Précisez la gravité et ajoutez une description pour chaque élément
                sélectionné.
              </p>
            </div>
            <div className="space-y-4">
              {selectedItems.map((itemId) => {
                const item = items.find((i) => i.id === itemId)
                if (!item) return null

                return (
                  <div
                    key={itemId}
                    className="bg-white p-4 rounded-lg border space-y-4"
                  >
                    <div className="flex items-center space-x-2">
                      <span className="text-lg">{item.icon}</span>
                      <h3 className="font-medium">{item.name}</h3>
                    </div>
                    <div className="space-y-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700">
                          Gravité
                        </label>
                        <select
                          value={itemDetails[itemId]?.severity || 'low'}
                          onChange={(e) =>
                            handleSeverityChange(itemId, e.target.value)
                          }
                          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                        >
                          <option value="low">Faible</option>
                          <option value="medium">Moyenne</option>
                          <option value="high">Haute</option>
                          <option value="critical">Critique</option>
                        </select>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700">
                          Description
                        </label>
                        <textarea
                          value={itemDetails[itemId]?.description || ''}
                          onChange={(e) =>
                            handleDescriptionChange(itemId, e.target.value)
                          }
                          rows={2}
                          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
                        />
                      </div>
                    </div>
                  </div>
                )
              })}
            </div>
            <div className="flex justify-between">
              <Button variant="outline" onClick={() => setStep(1)}>
                Retour
              </Button>
              <Button onClick={() => setStep(3)}>Continuer</Button>
            </div>
          </div>
        )

      case 3:
        return (
          <div className="space-y-6">
            <div className="bg-green-50 p-4 rounded-lg">
              <p className="text-sm text-green-700">
                Vérifiez le récapitulatif des problèmes avant de valider.
              </p>
            </div>
            <div className="space-y-4">
              <h3 className="font-medium text-lg">Éléments avec problèmes</h3>
              <div className="space-y-4">
                {selectedItems.map((itemId) => {
                  const item = items.find((i) => i.id === itemId)
                  if (!item) return null

                  return (
                    <div
                      key={itemId}
                      className="bg-white p-4 rounded-lg border"
                    >
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-2">
                          <span className="text-lg">{item.icon}</span>
                          <h4 className="font-medium">{item.name}</h4>
                        </div>
                        <div className="text-sm text-gray-500">
                          Gravité: {itemDetails[itemId]?.severity || 'faible'}
                        </div>
                      </div>
                      {itemDetails[itemId]?.description && (
                        <p className="mt-2 text-sm text-gray-600">
                          {itemDetails[itemId].description}
                        </p>
                      )}
                    </div>
                  )
                })}
              </div>

              <div className="mt-6">
                <h3 className="font-medium text-lg">Éléments en bon état</h3>
                <p className="text-sm text-gray-600 mt-2">
                  {items.length - selectedItems.length} éléments sont en bon état.
                </p>
              </div>
            </div>
            <div className="flex justify-between">
              <Button variant="outline" onClick={() => setStep(2)}>
                Retour
              </Button>
              <Button onClick={handleSubmit} disabled={isSubmitting}>
                {isSubmitting ? 'Enregistrement...' : 'Valider'}
              </Button>
            </div>
          </div>
        )

      default:
        return null
    }
  }

  return (
    <div className="space-y-6">
      {/* Indicateur de progression */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2">
          <div
            className={`w-8 h-8 rounded-full flex items-center justify-center ${
              step >= 1 ? 'bg-blue-600 text-white' : 'bg-gray-200'
            }`}
          >
            1
          </div>
          <div className="w-16 h-1 bg-gray-200">
            <div
              className={`h-full ${step >= 2 ? 'bg-blue-600' : 'bg-gray-200'}`}
            />
          </div>
          <div
            className={`w-8 h-8 rounded-full flex items-center justify-center ${
              step >= 2 ? 'bg-blue-600 text-white' : 'bg-gray-200'
            }`}
          >
            2
          </div>
          <div className="w-16 h-1 bg-gray-200">
            <div
              className={`h-full ${step >= 3 ? 'bg-blue-600' : 'bg-gray-200'}`}
            />
          </div>
          <div
            className={`w-8 h-8 rounded-full flex items-center justify-center ${
              step >= 3 ? 'bg-blue-600 text-white' : 'bg-gray-200'
            }`}
          >
            3
          </div>
        </div>
      </div>

      {renderStep()}
    </div>
  )
}


=== /Users/capmission/Documents/carcheck/src/app/vehicles/[id]/checkin/page.tsx ===
import { notFound } from 'next/navigation'
import Header from '@/components/layout/Header'
import { prisma } from '@/lib/prisma'
import { CheckInForm } from './CheckInForm'

async function getVehicle(id: string) {
  const vehicle = await prisma.vehicle.findUnique({
    where: { id },
    include: {
      checkInParts: {
        include: {
          item: true,
        },
      },
    },
  })

  if (!vehicle) {
    notFound()
  }

  return vehicle
}

async function getCheckInItems() {
  return prisma.checkInItem.findMany({
    orderBy: {
      category: 'asc',
    },
  })
}

export default async function VehicleCheckInPage({
  params,
}: {
  params: { id: string }
}) {
  const [vehicle, checkInItems] = await Promise.all([
    getVehicle(params.id),
    getCheckInItems(),
  ])

  // Fusionner les éléments de check-in avec leur statut actuel
  const itemsWithStatus = checkInItems.map((item) => {
    const existingPart = vehicle.checkInParts.find((part) => part.itemId === item.id)
    return {
      ...item,
      status: existingPart?.status || 'ok',
      // severity: existingPart?.severity, // Supprimé
      description: item.description || '',
    }
  })

  return (
    <>
      <Header
        title={`Check-in quotidien - ${vehicle.brand}`}
        showBack
      />
      
      <div className="p-4">
        <div className="max-w-7xl mx-auto">
          <CheckInForm
            vehicleId={vehicle.id}
            items={itemsWithStatus}
          />
        </div>
      </div>
    </>
  )
}


=== /Users/capmission/Documents/carcheck/src/app/vehicles/[id]/loading.tsx ===
import Header from '@/components/layout/Header'

export default function LoadingVehicle() {
  return (
    <>
      <Header
        title="Chargement..."
        showBack
      />
      
      <div className="p-4 space-y-6">
        <div className="bg-white shadow rounded-lg divide-y divide-gray-200">
          <div className="p-4">
            <div className="flex justify-between items-start">
              <div className="space-y-2">
                <div className="h-6 w-32 bg-gray-200 rounded animate-pulse" />
                <div className="h-4 w-24 bg-gray-200 rounded animate-pulse" />
              </div>
              <div className="h-6 w-20 bg-gray-200 rounded animate-pulse" />
            </div>
          </div>

          <div className="p-4">
            <div className="h-6 w-40 bg-gray-200 rounded animate-pulse mb-4" />
            <div className="space-y-2">
              <div className="h-4 w-48 bg-gray-200 rounded animate-pulse" />
              <div className="h-4 w-36 bg-gray-200 rounded animate-pulse" />
            </div>
          </div>

          <div className="p-4">
            <div className="h-6 w-32 bg-gray-200 rounded animate-pulse mb-4" />
            <div className="space-y-3">
              {[1, 2, 3].map((i) => (
                <div
                  key={i}
                  className="flex justify-between items-start bg-gray-50 p-3 rounded-md"
                >
                  <div className="space-y-2">
                    <div className="h-4 w-32 bg-gray-200 rounded animate-pulse" />
                    <div className="h-3 w-48 bg-gray-200 rounded animate-pulse" />
                  </div>
                  <div className="h-5 w-16 bg-gray-200 rounded animate-pulse" />
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </>
  )
}


=== /Users/capmission/Documents/carcheck/src/app/vehicles/[id]/not-found.tsx ===
import Link from 'next/link'
import Header from '@/components/layout/Header'

export default function VehicleNotFound() {
  return (
    <>
      <Header
        title="Véhicule non trouvé"
        showBack
      />
      
      <div className="p-4">
        <div className="max-w-xl mx-auto text-center">
          <h2 className="text-2xl font-bold tracking-tight text-gray-900">
            Véhicule introuvable
          </h2>
          <p className="mt-2 text-gray-500">
            Désolé, le véhicule que vous recherchez n'existe pas ou a été supprimé.
          </p>
          <div className="mt-6">
            <Link
              href="/vehicles"
              className="text-blue-600 hover:text-blue-500"
            >
              Retour à la liste des véhicules
            </Link>
          </div>
        </div>
      </div>
    </>
  )
}


=== /Users/capmission/Documents/carcheck/src/app/vehicles/[id]/page.tsx ===
import { notFound } from 'next/navigation'
import Link from 'next/link'
import Header from '@/components/layout/Header'
import { prisma } from '@/lib/prisma'
import { Badge } from '@/components/ui/Badge'
import { formatDate } from '@/lib/utils'
import { ClipboardDocumentCheckIcon, WrenchIcon } from '@heroicons/react/24/outline'

async function getVehicle(id: string) {
  const vehicle = await prisma.vehicle.findUnique({
    where: { id },
    include: {
      inspectionVehicles: {
        include: {
          inspection: true
        },
        orderBy: {
          inspection: {
            date: 'desc'
          }
        }
      },
      parts: {
        orderBy: {
          createdAt: 'desc'
        }
      }
    }
  })

  if (!vehicle) {
    notFound()
  }

  return vehicle
}

export default async function VehiclePage({
  params,
}: {
  params: { id: string }
}) {
  const vehicle = await getVehicle(params.id)
  const criticalParts = vehicle.parts.filter(part => part.severity === 'critical').length

  return (
    <>
      <Header
        title={`${vehicle.brand} ${vehicle.model}`}
        showBack
      />
      
      <div className="p-4 space-y-6">
        <div className="bg-white shadow rounded-lg divide-y divide-gray-200">
          {/* Informations générales */}
          <div className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <h2 className="text-lg font-medium text-gray-900">
                  {vehicle.brand} {vehicle.model}
                </h2>
                <p className="mt-1 text-sm text-gray-500">
                  {vehicle.year} • {vehicle.plateNumber}
                </p>
              </div>
              <div className="flex items-center space-x-2">
                {criticalParts > 0 && (
                  <Badge variant="destructive">
                    {criticalParts} pièce{criticalParts > 1 ? 's' : ''} critique{criticalParts > 1 ? 's' : ''}
                  </Badge>
                )}
              </div>
            </div>
          </div>

          {/* Actions */}
          <div className="p-4">
            <div className="flex space-x-4">
              <Link
                href={`/inspections/new/${vehicle.id}`}
                className="flex items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              >
                <ClipboardDocumentCheckIcon className="h-5 w-5 mr-2" />
                Nouvelle inspection
              </Link>
              <Link
                href={`/vehicles/${vehicle.id}/parts`}
                className="flex items-center justify-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
              >
                <WrenchIcon className="h-5 w-5 mr-2" />
                Gérer les pièces
              </Link>
            </div>
          </div>

          {/* Historique des inspections */}
          <div className="p-4">
            <h3 className="text-lg font-medium text-gray-900 mb-4">
              Historique des inspections
            </h3>
            <div className="space-y-4">
              {vehicle.inspectionVehicles.length > 0 ? (
                vehicle.inspectionVehicles.map((iv) => (
                  <div
                    key={iv.id}
                    className="flex items-center justify-between p-4 border rounded-lg"
                  >
                    <div>
                      <div className="text-sm font-medium text-gray-900">
                        {formatDate(iv.inspection.date)}
                      </div>
                      <div className="text-sm text-gray-500">
                        Par {iv.inspection.inspector}
                      </div>
                    </div>
                    <Badge
                      variant={
                        iv.status === 'critical'
                          ? 'destructive'
                          : iv.status === 'warning'
                          ? 'warning'
                          : 'success'
                      }
                    >
                      {iv.status === 'critical'
                        ? 'Critique'
                        : iv.status === 'warning'
                        ? 'À surveiller'
                        : 'OK'}
                    </Badge>
                  </div>
                ))
              ) : (
                <p className="text-sm text-gray-500">
                  Aucune inspection enregistrée
                </p>
              )}
            </div>
          </div>
        </div>
      </div>
    </>
  )
}


=== /Users/capmission/Documents/carcheck/src/app/vehicles/[id]/parts/IconPicker.tsx ===
'use client'

import { useState, useRef } from 'react'
import { Button } from '@/components/ui/Button'
import { Input } from '@/components/ui/Input'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { ScrollArea } from '@/components/ui/scroll-area'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { 
  faWrench, 
  faCog, 
  faGauge,
  faCarBattery,
  faOilCan,
  faGears,
  faCar, 
  faGasPump,
  faBatteryFull, 
  faBolt, 
  faToolbox, 
  faScrewdriver, 
  faHammer, 
  faCarCrash, 
  faCarSide, 
  faRoad, 
  faTrafficLight, 
  faMapMarkerAlt, 
  faThermometer,
  faLightbulb, 
  faFan, 
  faCompass,
} from '@fortawesome/free-solid-svg-icons'

const commonIcons = [
  { icon: faWrench, name: 'Wrench' },
  { icon: faCog, name: 'Cog' },
  { icon: faGauge, name: 'Gauge' },
  { icon: faCarBattery, name: 'Battery' },
  { icon: faOilCan, name: 'Oil' },
  { icon: faGears, name: 'Gears' },
  { icon: faCar, name: 'Car' },
  { icon: faGasPump, name: 'Gas Pump' },
  { icon: faBatteryFull, name: 'Battery Full' },
  { icon: faBolt, name: 'Bolt' },
  { icon: faToolbox, name: 'Toolbox' },
  { icon: faScrewdriver, name: 'Screwdriver' },
  { icon: faHammer, name: 'Hammer' },
  { icon: faCarCrash, name: 'Car Crash' },
  { icon: faCarSide, name: 'Car Side' },
  { icon: faRoad, name: 'Road' },
  { icon: faTrafficLight, name: 'Traffic Light' },
  { icon: faMapMarkerAlt, name: 'Map Marker' },
  { icon: faThermometer, name: 'Thermometer' },
  { icon: faLightbulb, name: 'Lightbulb' },
  { icon: faFan, name: 'Fan' },
  { icon: faCompass, name: 'Compass' },
]

// Retirer toutes les icônes non disponibles
const availableIcons = commonIcons.filter(icon => 
  icon.name !== 'Car Crash' && 
  icon.name !== 'Car Side' && 
  icon.name !== 'Road' && 
  icon.name !== 'Traffic Light' && 
  icon.name !== 'Map Marker' && 
  icon.name !== 'Thermometer' && 
  icon.name !== 'Lightbulb' && 
  icon.name !== 'Fan' && 
  icon.name !== 'Compass'
)

interface IconPickerProps {
  value: string
  onChange: (value: { type: 'icon' | 'image', value: string }) => void
}

export default function IconPicker({ value, onChange }: IconPickerProps) {
  const [isOpen, setIsOpen] = useState(false)
  const [searchTerm, setSearchTerm] = useState('')
  const [activeTab, setActiveTab] = useState('icons')
  const fileInputRef = useRef<HTMLInputElement>(null)

  const handleIconSelect = (iconName: string) => {
    onChange({ type: 'icon', value: iconName })
    setIsOpen(false)
  }

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (file) {
      const reader = new FileReader()
      reader.onloadend = () => {
        const base64 = reader.result as string
        onChange({ type: 'image', value: base64 })
        setIsOpen(false)
      }
      reader.readAsDataURL(file)
    }
  }

  const filteredIcons = availableIcons.filter(icon => 
    icon.name.toLowerCase().includes(searchTerm.toLowerCase())
  )

  const displayValue = value ? (
    value.startsWith('data:image') ? (
      <img src={value} alt="Selected" className="w-8 h-8 object-contain" />
    ) : (
      <FontAwesomeIcon icon={availableIcons.find(i => i.name === value)?.icon || faCar} className="w-6 h-6" />
    )
  ) : (
    'Choisir une icône'
  )

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button
          variant="outline"
          className="w-full h-20 text-3xl flex items-center justify-center"
        >
          {displayValue}
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle>Choisir une icône</DialogTitle>
        </DialogHeader>
        <Tabs defaultValue="icons" value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="icons">Icônes</TabsTrigger>
            <TabsTrigger value="upload">Image</TabsTrigger>
          </TabsList>
          <TabsContent value="icons" className="space-y-4 py-4">
            <Input
              placeholder="Rechercher une icône"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
            <ScrollArea className="h-72">
              <div className="grid grid-cols-4 gap-2">
                {filteredIcons.map((icon) => (
                  <Button
                    key={icon.name}
                    variant="outline"
                    className="h-16 flex flex-col items-center justify-center gap-1 p-1"
                    onClick={() => handleIconSelect(icon.name)}
                  >
                    <FontAwesomeIcon icon={icon.icon} className="w-6 h-6" />
                    <span className="text-xs text-center">{icon.name}</span>
                  </Button>
                ))}
              </div>
            </ScrollArea>
          </TabsContent>
          <TabsContent value="upload" className="space-y-4 py-4">
            <div className="flex flex-col items-center gap-4">
              <Button
                variant="outline"
                className="w-full h-32 flex flex-col items-center justify-center"
                onClick={() => fileInputRef.current?.click()}
              >
                <span className="text-2xl mb-2">📁</span>
                <span>Cliquez pour importer une image</span>
              </Button>
              <input
                ref={fileInputRef}
                type="file"
                accept="image/*"
                className="hidden"
                onChange={handleImageUpload}
              />
              <p className="text-sm text-gray-500">
                Formats supportés: PNG, JPG, SVG
              </p>
            </div>
          </TabsContent>
        </Tabs>
      </DialogContent>
    </Dialog>
  )
}


=== /Users/capmission/Documents/carcheck/src/app/vehicles/[id]/parts/SelectParts.tsx ===
'use client'

import { useState } from 'react'
import { DefaultPart, Part } from '@prisma/client'
import { Button } from '@/components/ui/Button'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { Input } from '@/components/ui/Input'
import { Label } from '@/components/ui/Label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Textarea } from '@/components/ui/textarea'
import { useRouter } from 'next/navigation'
import IconPicker from './IconPicker'

type PartSeverity = 'critical' | 'high' | 'medium' | 'low'

interface SelectedPart {
  id: string
  name: string
  icon: string
  category: string
  description?: string | null
  severity: PartSeverity
  status?: string
  isDefault?: boolean
}

interface SelectPartsProps {
  vehicleId: string
  defaultParts: DefaultPart[]
  existingParts?: Part[]
}

const SelectParts = ({ vehicleId, defaultParts, existingParts = [] }: SelectPartsProps) => {
  const router = useRouter()
  
  // Initialiser les pièces sélectionnées avec les pièces existantes
  const [selectedParts, setSelectedParts] = useState<SelectedPart[]>(
    existingParts.map((part) => ({
      id: part.id,
      name: part.name,
      icon: part.icon || '🔧',
      category: part.category || 'Autre',
      description: part.description,
      severity: (part.severity as PartSeverity) || 'low',
      status: part.status || 'good',
      isDefault: part.isDefault,
    }))
  )

  const [showNewPartDialog, setShowNewPartDialog] = useState(false)
  const [newPart, setNewPart] = useState({
    name: '',
    icon: '🔧',
    category: '',
    description: '',
  })

  const togglePart = (part: DefaultPart) => {
    const isSelected = selectedParts.some((p) => p.name === part.name)
    if (isSelected) {
      setSelectedParts(selectedParts.filter((p) => p.name !== part.name))
    } else {
      setSelectedParts([...selectedParts, {
        id: part.id,
        name: part.name,
        icon: part.icon,
        category: part.category,
        description: part.description,
        severity: 'low',
        status: 'good',
        isDefault: true,
      }])
    }
  }

  const updatePartSeverity = (partId: string, severity: PartSeverity) => {
    setSelectedParts(
      selectedParts.map((part) =>
        part.id === partId ? { ...part, severity } : part
      )
    )
  }

  const handleNewPartSubmit = () => {
    const customPart: SelectedPart = {
      id: `custom-${Date.now()}`,
      name: newPart.name,
      icon: newPart.icon,
      category: newPart.category,
      description: newPart.description,
      severity: 'low',
      status: 'good',
      isDefault: false,
    }
    setSelectedParts([...selectedParts, customPart])
    setShowNewPartDialog(false)
    setNewPart({ name: '', icon: '🔧', category: '', description: '' })
  }

  const handleSave = async () => {
    try {
      const partsToSave = selectedParts.map(part => ({
        name: part.name,
        icon: part.icon,
        category: part.category,
        description: part.description || '',
        severity: part.severity,
        status: part.status || 'good',
        isDefault: part.isDefault || false,
      }))

      console.log('Sending parts:', partsToSave)

      const response = await fetch(`/api/vehicles/${vehicleId}/parts`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ parts: partsToSave }),
      })

      if (!response.ok) {
        const errorData = await response.json()
        console.error('Server error:', errorData)
        throw new Error(errorData.error || 'Failed to save parts')
      }

      router.refresh()
    } catch (error) {
      console.error('Error saving parts:', error)
      // Ici vous pouvez ajouter une notification d'erreur pour l'utilisateur
    }
  }

  const getPartsByCategory = () => {
    const categories = defaultParts
      .map((part) => part.category)
      .filter((category, index, self) => self.indexOf(category) === index); // Filtrer les catégories uniques
    return categories.map((category) => ({
      category,
      parts: defaultParts.filter((part) => part.category === category),
    }))
  }

  return (
    <div className="space-y-6">
      <div className="space-y-4">
        {getPartsByCategory().map(({ category, parts }) => (
          <div key={category} className="space-y-2">
            <h3 className="font-semibold">{category}</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {parts.map((part) => {
                const isSelected = selectedParts.some((p) => p.name === part.name)
                const selectedPart = selectedParts.find((p) => p.name === part.name)

                return (
                  <div
                    key={part.id}
                    className={`p-4 rounded-lg border ${
                      isSelected ? 'border-primary bg-primary/5' : 'border-gray-200'
                    }`}
                  >
                    <div className="flex items-start justify-between">
                      <div className="flex items-center space-x-2">
                        <span className="text-2xl">{part.icon}</span>
                        <div>
                          <p className="font-medium">{part.name}</p>
                          <p className="text-sm text-gray-500">{part.description}</p>
                        </div>
                      </div>
                      <Button
                        variant={isSelected ? "secondary" : "outline"}
                        size="sm"
                        onClick={() => togglePart(part)}
                      >
                        {isSelected ? 'Retirer' : 'Ajouter'}
                      </Button>
                    </div>
                    {isSelected && (
                      <div className="mt-4">
                        <Label htmlFor={`severity-${part.id}`}>Criticité</Label>
                        <Select
                          value={selectedPart?.severity}
                          onValueChange={(value: PartSeverity) => updatePartSeverity(part.id, value)}
                        >
                          <SelectTrigger id={`severity-${part.id}`}>
                            <SelectValue placeholder="Sélectionner la criticité" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="low">Faible</SelectItem>
                            <SelectItem value="medium">Moyenne</SelectItem>
                            <SelectItem value="high">Haute</SelectItem>
                            <SelectItem value="critical">Critique</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    )}
                  </div>
                )
              })}
            </div>
          </div>
        ))}
      </div>

      <div className="flex justify-between items-center pt-6 border-t">
        <Dialog open={showNewPartDialog} onOpenChange={setShowNewPartDialog}>
          <DialogTrigger asChild>
            <Button variant="outline">Ajouter une pièce personnalisée</Button>
          </DialogTrigger>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Nouvelle pièce</DialogTitle>
            </DialogHeader>
            <div className="space-y-4">
              <div>
                <Label htmlFor="name">Nom</Label>
                <Input
                  id="name"
                  value={newPart.name}
                  onChange={(e) => setNewPart({ ...newPart, name: e.target.value })}
                />
              </div>
              <div>
                <Label>Icône</Label>
                <IconPicker
                  value={newPart.icon}
                  onChange={(icon) => setNewPart({ ...newPart, icon: icon.value })}
                />
              </div>
              <div>
                <Label htmlFor="category">Catégorie</Label>
                <Input
                  id="category"
                  value={newPart.category}
                  onChange={(e) => setNewPart({ ...newPart, category: e.target.value })}
                />
              </div>
              <div>
                <Label htmlFor="description">Description</Label>
                <Textarea
                  id="description"
                  value={newPart.description}
                  onChange={(e) => setNewPart({ ...newPart, description: e.target.value })}
                />
              </div>
              <Button onClick={handleNewPartSubmit} disabled={!newPart.name || !newPart.category}>
                Ajouter
              </Button>
            </div>
          </DialogContent>
        </Dialog>
        <Button onClick={handleSave}>Enregistrer les modifications</Button>
      </div>
    </div>
  )
}

export default SelectParts


=== /Users/capmission/Documents/carcheck/src/app/vehicles/[id]/parts/page.tsx ===
import { notFound } from 'next/navigation'
import { prisma } from '@/lib/prisma'
import SelectParts from './SelectParts'
import { Button } from '@/components/ui/Button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'

export const dynamic = 'force-dynamic'
export const revalidate = 0

export default async function VehiclePartsPage({
  params,
}: {
  params: { id: string }
}) {
  if (!params.id) {
    notFound()
  }

  try {
    const [vehicle, defaultParts, existingParts] = await Promise.all([
      prisma.vehicle.findUnique({
        where: { id: params.id },
      }),
      prisma.defaultPart.findMany({
        where: { isActive: true },
        orderBy: { category: 'asc' },
      }),
      prisma.part.findMany({
        where: { vehicleId: params.id },
        orderBy: { createdAt: 'desc' },
      }),
    ])

    if (!vehicle) {
      notFound()
    }

    return (
      <div className="container mx-auto py-6 space-y-6">
        <div className="flex items-center justify-between">
          <h1 className="text-2xl font-bold">
            Pièces du véhicule - {vehicle.brand} {vehicle.affectation}
          </h1>
        </div>

        <Card>
          <CardHeader>
            <CardTitle>Gérer les pièces</CardTitle>
            <CardDescription>
              Sélectionnez les pièces à suivre pour ce véhicule et définissez leur état
            </CardDescription>
          </CardHeader>
          <CardContent>
            <SelectParts
              vehicleId={vehicle.id}
              defaultParts={defaultParts}
              existingParts={existingParts}
            />
          </CardContent>
        </Card>
      </div>
    )
  } catch (error) {
    console.error('Error loading vehicle parts:', error)
    return (
      <div className="container mx-auto py-6">
        <div className="bg-red-50 border-l-4 border-red-400 p-4">
          <div className="flex">
            <div className="ml-3">
              <p className="text-sm text-red-700">
                Une erreur est survenue lors du chargement des pièces du véhicule.
              </p>
            </div>
          </div>
        </div>
      </div>
    )
  }
}


=== /Users/capmission/Documents/carcheck/src/app/vehicles/components/VehicleForm.tsx ===
'use client'

import { useRouter } from 'next/navigation';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';
import { Label } from '@/components/ui/Label';
import { vehicleSchema, VehicleFormData, ACCEPTED_IMAGE_TYPES } from '@/types/index';
import { getErrorMessage } from '@/lib/utils';

export default function VehicleForm() {
  const router = useRouter();
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    setError,
    clearErrors,
  } = useForm<VehicleFormData>({
    resolver: zodResolver(vehicleSchema),
  });

  async function onSubmit(data: VehicleFormData) {
    try {
      clearErrors('root');
      const formData = new FormData();
      formData.append('brand', data.brand);
      formData.append('affectation', data.affectation);
      
      if (data.photo?.[0]) {
        formData.append('photo', data.photo[0]);
      }

      const response = await fetch('/api/vehicles', {
        method: 'POST',
        body: formData,
      });

      const responseData = await response.json();

      if (!response.ok) {
        throw new Error(responseData.error || 'Une erreur est survenue');
      }

      router.push('/vehicles');
      router.refresh();
    } catch (error) {
      console.error('Error creating vehicle:', error);
      setError('root', {
        type: 'manual',
        message: error instanceof Error 
          ? error.message 
          : 'Une erreur est survenue lors de la création du véhicule',
      });
    }
  }

  return (
    <form 
      onSubmit={handleSubmit(onSubmit)} 
      className="space-y-6 max-w-md mx-auto p-6 bg-white rounded-lg shadow-md"
    >
      <div className="space-y-4">
        <div>
          <Label htmlFor="brand">Marque</Label>
          <Input
            id="brand"
            type="text"
            {...register('brand')}
            error={getErrorMessage(errors.brand)}
            aria-invalid={!!errors.brand}
          />
          {errors.brand && (
            <p className="mt-1 text-sm text-red-600">{getErrorMessage(errors.brand)}</p>
          )}
        </div>

        <div>
          <Label htmlFor="affectation">Affectation</Label>
          <Input
            id="affectation"
            type="text"
            {...register('affectation')}
            error={getErrorMessage(errors.affectation)}
            aria-invalid={!!errors.affectation}
          />
          {errors.affectation && (
            <p className="mt-1 text-sm text-red-600">{getErrorMessage(errors.affectation)}</p>
          )}
        </div>

        <div>
          <Label htmlFor="photo">Photo (optionnel)</Label>
          <input
            type="file"
            id="photo"
            accept={ACCEPTED_IMAGE_TYPES.join(',')}
            {...register('photo')}
            className="mt-1 block w-full rounded-md border border-gray-300 
              px-3 py-2 text-gray-900 placeholder-gray-500 
              focus:border-blue-500 focus:outline-none focus:ring-1 focus:ring-blue-500
              disabled:cursor-not-allowed disabled:bg-gray-50 disabled:text-gray-500"
            aria-invalid={!!errors.photo}
          />
          {errors.photo && (
            <p className="mt-1 text-sm text-red-600">{getErrorMessage(errors.photo)}</p>
          )}
        </div>
      </div>

      {errors.root && (
        <div className="p-3 rounded-md bg-red-50 border border-red-200">
          <p className="text-sm text-red-600">{errors.root.message}</p>
        </div>
      )}

      <Button 
        type="submit" 
        disabled={isSubmitting}
        className="w-full bg-blue-600 hover:bg-blue-700 text-white"
      >
        {isSubmitting ? 'Création...' : 'Créer le véhicule'}
      </Button>
    </form>
  );
}

=== /Users/capmission/Documents/carcheck/src/app/vehicles/components/VehiclesList.tsx ===
import Link from 'next/link';
import { Badge } from '@/components/ui/Badge';
import { prisma } from '@/lib/prisma';
import { ChevronRightIcon, PlusIcon } from '@heroicons/react/24/outline';

async function getVehicles() {
  try {
    console.log('Fetching vehicles...');
    const vehicles = await prisma.vehicle.findMany({
      orderBy: {
        createdAt: 'desc',
      },
      include: {
        parts: true,
      },
    });
    console.log('Vehicles found:', vehicles);
    return vehicles;
  } catch (error) {
    console.error('Error fetching vehicles:', error);
    return [];
  }
}

export async function VehiclesList() {
  const vehicles = await getVehicles();

  if (!vehicles || vehicles.length === 0) {
    console.log('No vehicles found');
    return (
      <div className="text-center py-12">
        <h3 className="mt-2 text-sm font-semibold text-gray-900">Aucun véhicule</h3>
        <p className="mt-1 text-sm text-gray-500">Commencez par ajouter un véhicule à votre parc.</p>
        <div className="mt-6">
          <Link
            href="/vehicles/new"
            className="inline-flex items-center rounded-md bg-blue-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-blue-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600"
          >
            <PlusIcon className="-ml-0.5 mr-1.5 h-5 w-5" aria-hidden="true" />
            Nouveau véhicule
          </Link>
        </div>
      </div>
    );
  }

  console.log('Rendering vehicles:', vehicles.length);
  return (
    <div className="divide-y divide-gray-200">
      {vehicles.map((vehicle) => {
        const criticalParts = vehicle.parts.filter(part => part.severity === 'critical').length;
        const status = criticalParts > 0 ? 'critical' : 'good';

        return (
          <Link
            key={vehicle.id}
            href={`/vehicles/${vehicle.id}`}
            className="block hover:bg-gray-50"
          >
            <div className="px-4 py-4 flex items-center">
              {vehicle.photo && (
                <img
                  src={vehicle.photo}
                  alt={`${vehicle.brand} ${vehicle.affectation}`} // Utilisation de 'affectation' pour le texte alternatif
                  className="w-16 h-16 rounded-md object-cover mr-4"
                />
              )}
              <div className="flex-grow">
                <h3 className="text-base font-semibold text-gray-900">
                  {vehicle.brand} {vehicle.affectation} {/* Affiche la marque et l'affectation */}
                </h3>
              </div>
              <div className="flex items-center">
                <Badge variant={status === 'critical' ? 'destructive' : 'default'}>
                  {criticalParts > 0 ? `${criticalParts} pièce${criticalParts > 1 ? 's' : ''} critique${criticalParts > 1 ? 's' : ''}` : 'OK'}
                </Badge>
                <ChevronRightIcon className="ml-4 h-5 w-5 text-gray-400" />
              </div>
            </div>
          </Link>
        );
      })}
    </div>
  );
}

=== /Users/capmission/Documents/carcheck/src/app/vehicles/new/page.tsx ===
import Header from '@/components/layout/Header'
import VehicleForm from '../components/VehicleForm'

export default function NewVehiclePage() {
  return (
    <>
      <Header 
        title="Nouveau Véhicule"
        showBack 
      />
      <div className="p-4">
        <div className="max-w-2xl mx-auto space-y-6">
          <div className="bg-white shadow-sm rounded-lg p-6">
            <VehicleForm />
          </div>
        </div>
      </div>
    </>
  )
}


=== /Users/capmission/Documents/carcheck/src/app/vehicles/page.tsx ===
// app/vehicles/page.tsx
import { VehiclesList } from './components/VehiclesList'
import { protectedRoute } from "@/lib/protectedRoute"
import AddButton from '@/components/ui/AddButton'

export default async function VehiclesPage() {
  const session = await protectedRoute(['Inspecteur', 'Maintenance', 'Safety'])
  const isSafetyAndInspecteur = session.user.role === 'Safety' || session.user.role === 'Inspecteur';

  return (
    <div>
      {isSafetyAndInspecteur && (
        <AddButton 
          href="/vehicles/new" 
          label="Ajouter un véhicule" 
        />
      )}
      <VehiclesList />
    </div>
  )
}

=== /Users/capmission/Documents/carcheck/src/components/checkin/CheckInGrid.tsx ===
'use client'

import { useState } from 'react'
import { Badge } from '@/components/ui/Badge'
import { Button } from '@/components/ui/Button'
import { CheckInItem } from '@prisma/client'

type CheckInItemWithStatus = CheckInItem & {
  status?: string
  severity?: string
  description?: string
}

interface CheckInGridProps {
  items: CheckInItemWithStatus[]
  onItemSelect: (item: CheckInItemWithStatus) => void
  selectedItems: string[]
}

export function CheckInGrid({ items, onItemSelect, selectedItems }: CheckInGridProps) {
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null)

  // Obtenir les catégories uniques
  const categories = Array.from(new Set(items.map((item) => item.category)))

  // Filtrer les éléments par catégorie
  const filteredItems = selectedCategory
    ? items.filter((item) => item.category === selectedCategory)
    : items

  const getStatusColor = (status?: string) => {
    switch (status) {
      case 'warning':
        return 'bg-yellow-100 text-yellow-800'
      case 'critical':
        return 'bg-red-100 text-red-800'
      default:
        return 'bg-green-100 text-green-800'
    }
  }

  return (
    <div className="space-y-6">
      {/* Filtres par catégorie */}
      <div className="flex flex-wrap gap-2">
        <Button
          variant={selectedCategory === null ? 'default' : 'outline'}
          onClick={() => setSelectedCategory(null)}
          className="text-sm"
        >
          Tous
        </Button>
        {categories.map((category) => (
          <Button
            key={category}
            variant={selectedCategory === category ? 'default' : 'outline'}
            onClick={() => setSelectedCategory(category)}
            className="text-sm"
          >
            {category}
          </Button>
        ))}
      </div>

      {/* Grille d'éléments */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {filteredItems.map((item) => (
          <button
            key={item.id}
            onClick={() => onItemSelect(item)}
            className={`flex items-center p-4 rounded-lg border transition-colors ${
              selectedItems.includes(item.id)
                ? 'border-red-500 bg-red-50'
                : 'border-gray-200 hover:border-blue-500'
            }`}
          >
            <div className="flex-1 text-left">
              <div className="flex items-center space-x-2">
                <span className="text-lg">{item.icon}</span>
                <h3 className="font-medium">{item.name}</h3>
              </div>
              <p className="text-sm text-gray-500 mt-1">{item.description}</p>
              {item.status && (
                <Badge className={`mt-2 ${getStatusColor(item.status)}`}>
                  {item.status}
                  {item.severity && ` - ${item.severity}`}
                </Badge>
              )}
            </div>
          </button>
        ))}
      </div>
    </div>
  )
}


=== /Users/capmission/Documents/carcheck/src/components/dashboards/DashboardStats.tsx ===
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';
import { ClipboardCheck, AlertTriangle, Wrench, CheckCircle } from 'lucide-react';

interface VehicleStats {
  total: number;
  inspected: number;
  remaining: number;
}

interface InspectionStats {
  daily: number;
  critical: number;
  pending: number;
}

interface MaintenanceStats {
  active: number;
  completed: number;
  critical: number;
}

interface Stats {
  vehicles: VehicleStats;
  inspections: InspectionStats;
  maintenance: MaintenanceStats;
}

interface DailyStats {
  date: string;
  inspected: number;
  critical: number;
  pending: number;
}

const DashboardStats = ({ role = 'Inspecteur' }) => {
  const [stats, setStats] = React.useState<Stats>({
    vehicles: { total: 0, inspected: 0, remaining: 0 },
    inspections: { daily: 0, critical: 0, pending: 0 },
    maintenance: { active: 0, completed: 0, critical: 0 }
  });
  
  const [dailyStats, setDailyStats] = React.useState<DailyStats[]>([]);

  React.useEffect(() => {
    const fetchStats = async () => {
      try {
        const response = await fetch('/api/stats');
        const data = await response.json();
        setStats(data);
      } catch (error) {
        console.error('Error fetching stats:', error);
      }
    };

    const fetchDailyStats = async () => {
      try {
        const response = await fetch('/api/stats/daily');
        const data = await response.json();
        setDailyStats(data);
      } catch (error) {
        console.error('Error fetching daily stats:', error);
      }
    };

    fetchStats();
    fetchDailyStats();
  }, []);

  const StatCard = ({ title, value, icon: Icon, color }) => (
    <Card>
      <CardHeader className="flex flex-row items-center justify-between pb-2">
        <CardTitle className="text-sm font-medium">{title}</CardTitle>
        <Icon className={`h-4 w-4 ${color}`} />
      </CardHeader>
      <CardContent>
        <div className="text-2xl font-bold">{value}</div>
      </CardContent>
    </Card>
  );

  const renderRoleSpecificStats = () => {
    switch (role) {
      case 'Inspecteur':
        return (
          <div className="grid gap-4 md:grid-cols-3">
            <StatCard
              title="À inspecter aujourd'hui"
              value={stats.vehicles.remaining}
              icon={ClipboardCheck}
              color="text-blue-500"
            />
            <StatCard
              title="Inspectés aujourd'hui"
              value={stats.vehicles.inspected}
              icon={CheckCircle}
              color="text-green-500"
            />
            <StatCard
              title="Cas critiques"
              value={stats.inspections.critical}
              icon={AlertTriangle}
              color="text-red-500"
            />
          </div>
        );
      
      case 'Maintenance':
        return (
          <div className="grid gap-4 md:grid-cols-3">
            <StatCard
              title="En maintenance"
              value={stats.maintenance.active}
              icon={Wrench}
              color="text-orange-500"
            />
            <StatCard
              title="Maintenances terminées"
              value={stats.maintenance.completed}
              icon={CheckCircle}
              color="text-green-500"
            />
            <StatCard
              title="Cas critiques"
              value={stats.maintenance.critical}
              icon={AlertTriangle}
              color="text-red-500"
            />
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <div className="space-y-6">
      {renderRoleSpecificStats()}
      
      <Card>
        <CardHeader>
          <CardTitle>Statistiques journalières</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="h-[300px] w-full">
            <BarChart
              data={dailyStats}
              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
            >
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="date" />
              <YAxis />
              <Tooltip />
              <Legend />
              <Bar dataKey="inspected" fill="#22c55e" name="Inspectés" />
              <Bar dataKey="critical" fill="#ef4444" name="Critiques" />
              <Bar dataKey="pending" fill="#3b82f6" name="En attente" />
            </BarChart>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default DashboardStats;

=== /Users/capmission/Documents/carcheck/src/components/dashboards/InspecteurDashboard.tsx ===
"use client";

import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { AlertTriangle, CheckCircle, Clock } from 'lucide-react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';

interface Inspection {
  inspected: number;
  critical: number;
  pending: number;
  date: string;
}

interface Stats {
  uninspected: number;
  critical: number;
  history: Inspection[];
}

const InspectionOverview = () => {
  const [stats, setStats] = useState<Stats | null>(null);

  useEffect(() => {
    const fetchStats = async () => {
      try {
        const response = await fetch('/api/inspections/stats');
        const data = await response.json();
        setStats(data);
      } catch (error) {
        console.error('Error fetching inspection stats:', error);
      }
    };

    fetchStats();
    const interval = setInterval(fetchStats, 300000); // Actualiser toutes les 5 minutes
    return () => clearInterval(interval);
  }, []);

  return (
    <div className="space-y-6">
      {/* Section des véhicules non inspectés */}
      <Card>
        <CardHeader className="pb-2">
          <CardTitle className="text-lg font-medium">
            État des inspections aujourd'hui
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid gap-4 md:grid-cols-3">
            <div className="flex items-center space-x-4">
              <Clock className="h-6 w-6 text-orange-500" />
              <div>
                <p className="text-sm font-medium">Non inspectés</p>
                <p className="text-2xl font-bold">{stats?.uninspected || 0}</p>
              </div>
            </div>
            <div className="flex items-center space-x-4">
              <AlertTriangle className="h-6 w-6 text-red-500" />
              <div>
                <p className="text-sm font-medium">Cas critiques</p>
                <p className="text-2xl font-bold">{stats?.critical || 0}</p>
              </div>
            </div>
            <div className="flex items-center space-x-4">
              <CheckCircle className="h-6 w-6 text-green-500" />
              <div>
                <p className="text-sm font-medium">Inspectés</p>
                <p className="text-2xl font-bold">
                  {stats?.history && stats.history.length > 0 
                    ? stats.history[stats.history.length - 1]?.inspected 
                    : 0}
                </p>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Historique des inspections */}
      <Card>
        <CardHeader>
          <CardTitle>Historique des inspections</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="h-[300px] w-full">
            <BarChart
              data={stats?.history || []}
              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
            >
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="date" />
              <YAxis />
              <Tooltip />
              <Legend />
              <Bar dataKey="inspected" name="Inspectés" fill="#22c55e" />
              <Bar dataKey="critical" name="Critiques" fill="#ef4444" />
              <Bar dataKey="pending" name="En attente" fill="#f97316" />
            </BarChart>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default InspectionOverview;

=== /Users/capmission/Documents/carcheck/src/components/dashboards/MaintenanceDashboard.tsx ===
'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert'
import { Wrench, AlertTriangle, CheckCircle, Calendar } from 'lucide-react'
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts'

const MaintenanceOverview = () => {
  const [stats, setStats] = useState({
    active: [],
    completed: [],
    critical: [],
    dailyActions: []
  })

  useEffect(() => {
    const fetchStats = async () => {
      try {
        const response = await fetch('/api/maintenance/stats')
        
        // Check if the response is okay
        if (!response.ok) {
          const errorBody = await response.text(); // Get the response body
          throw new Error(`HTTP error! status: ${response.status}, body: ${errorBody}`);
        }
        
        const data = await response.json()
        setStats(data)
      } catch (error) {
        console.error('Error fetching maintenance stats:', error)
      }
    }

    fetchStats()
    const interval = setInterval(fetchStats, 300000)
    return () => clearInterval(interval)
  }, [])

  return (
    <div className="space-y-6">
      {/* Section des véhicules en maintenance */}
      <div className="grid gap-4 md:grid-cols-3">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="flex items-center gap-2">
              <Wrench className="h-4 w-4" />
              En maintenance
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.active.length}</div>
            <div className="mt-4 space-y-2">
              {stats.active.map(vehicle => (
                <div key={vehicle.id} className="text-sm">
                  {vehicle.brand} - {vehicle.affectation}
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="flex items-center gap-2">
              <CheckCircle className="h-4 w-4" />
              Maintenance terminée
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.completed.length}</div>
            <div className="mt-4 space-y-2">
              {stats.completed.map(vehicle => (
                <div key={vehicle.id} className="text-sm">
                  {vehicle.brand} - {vehicle.affectation}
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="flex items-center gap-2">
              <AlertTriangle className="h-4 w-4" />
              Cas critiques
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-red-500">
              {stats.critical.length}
            </div>
            <div className="mt-4 space-y-2">
              {stats.critical.map(vehicle => (
                <div key={vehicle.id} className="text-sm">
                  {vehicle.brand} - {vehicle.affectation}
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Section des actions quotidiennes */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Calendar className="h-4 w-4" />
            Actions quotidiennes
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="h-[300px] w-full">
            <BarChart
              data={stats.dailyActions}
              margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
            >
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="date" />
              <YAxis />
              <Tooltip />
              <Legend />
              <Bar dataKey="completed" name="Terminées" fill="#22c55e" />
              <Bar dataKey="started" name="Démarrées" fill="#3b82f6" />
              <Bar dataKey="critical" name="Critiques" fill="#ef4444" />
            </BarChart>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

export default MaintenanceOverview

=== /Users/capmission/Documents/carcheck/src/components/dashboards/ReportGenerator.tsx ===
import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Checkbox } from '@/components/ui/checkbox';
import { Button } from '@/components/ui/button';
import { FileText, Mail } from 'lucide-react';

const ReportGenerator = () => {
  const [selectedSections, setSelectedSections] = useState([]);
  const [generating, setGenerating] = useState(false);

  const reportSections = [
    {
      id: 'daily-inspections',
      title: 'Inspections de la journée',
      description: 'Résumé des inspections effectuées aujourd\'hui'
    },
    {
      id: 'critical-vehicles',
      title: 'Véhicules critiques',
      description: 'Liste des véhicules présentant des défauts critiques'
    },
    {
      id: 'healthy-vehicles',
      title: 'Véhicules en bon état',
      description: 'Liste des véhicules sans défaut majeur'
    },
    {
      id: 'maintenance',
      title: 'Véhicules en maintenance',
      description: 'Liste des véhicules actuellement en maintenance'
    }
  ];

  const handleGenerateReport = async () => {
    if (selectedSections.length === 0) return;
    
    setGenerating(true);
    try {
      const response = await fetch('/api/reports', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ sections: selectedSections })
      });
      
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'report.pdf';
      document.body.appendChild(a);
      a.click();
      a.remove();
    } catch (error) {
      console.error('Error generating report:', error);
    } finally {
      setGenerating(false);
    }
  };

  const handleSendEmail = async () => {
    if (selectedSections.length === 0) return;
    
    setGenerating(true);
    try {
      await fetch('/api/reports/email', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ sections: selectedSections })
      });
    } catch (error) {
      console.error('Error sending report:', error);
    } finally {
      setGenerating(false);
    }
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Générer un rapport</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {reportSections.map((section) => (
              <div key={section.id} className="flex items-center space-x-2">
                <Checkbox
                  id={section.id}
                  checked={selectedSections.includes(section.id)}
                  onCheckedChange={(checked) => {
                    setSelectedSections(checked
                      ? [...selectedSections, section.id]
                      : selectedSections.filter(id => id !== section.id)
                    );
                  }}
                />
                <div className="grid gap-1.5 leading-none">
                  <label
                    htmlFor={section.id}
                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                  >
                    {section.title}
                  </label>
                  <p className="text-sm text-gray-500">
                    {section.description}
                  </p>
                </div>
              </div>
            ))}
          </div>

          <div className="flex space-x-4 mt-6">
            <Button
              onClick={handleGenerateReport}
              disabled={generating || selectedSections.length === 0}
            >
              <FileText className="w-4 h-4 mr-2" />
              Générer PDF
            </Button>
            <Button
              onClick={handleSendEmail}
              disabled={generating || selectedSections.length === 0}
              variant="outline"
            >
              <Mail className="w-4 h-4 mr-2" />
              Envoyer par email
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default ReportGenerator;

=== /Users/capmission/Documents/carcheck/src/components/dashboards/SafetyDashboard.tsx ===
import React from 'react'

export default function AdminDashboard() {
  return (
    <div>
      <h1>Tableau de bord Administrateur</h1>
      {/* Composants spécifiques pour l'admin */}
      <div>
        <h2>Actions rapides</h2>
        {/* Ajouter véhicule, utilisateurs, etc. */}
      </div>
    </div>
  )
}

=== /Users/capmission/Documents/carcheck/src/components/layout/AppLayout.tsx ===
// components/layout/AppLayout.tsx
'use client'

import { useSession } from 'next-auth/react'
import Header from './Header'
import MobileNav from './MobileNav'

export default function AppLayout({ children }) {
  const { status } = useSession()

  // Si l'utilisateur n'est pas authentifié, afficher uniquement le contenu
  if (status !== 'authenticated') {
    return <>{children}</>
  }

  // Si l'utilisateur est authentifié, afficher le layout complet
  return (
    <div className="min-h-screen flex flex-col">
      <Header title="Mon Application" />
      <main className="flex-1 pb-16">
        {children}
      </main>
      <MobileNav />
    </div>
  )
}

=== /Users/capmission/Documents/carcheck/src/components/layout/Header.tsx ===
// components/layout/Header.tsx
'use client'

import { ChevronLeftIcon, PowerIcon } from '@heroicons/react/24/outline'
import { useRouter, usePathname } from 'next/navigation'
import { signOut } from 'next-auth/react'

interface HeaderProps {
  title?: string  // Rendre le titre optionnel
  showBack?: boolean
  action?: React.ReactNode
  description?: string
}

export default function Header({ 
  title = "Mon Application",  // Titre par défaut
  showBack = false, 
  action, 
  description 
}: HeaderProps) {
  const router = useRouter()
  const pathname = usePathname()

  // Fonction pour déterminer le titre en fonction du chemin
  const getPageTitle = () => {
    switch(pathname) {
      case '/':
        return 'Accueil'
      case '/vehicles':
        return 'Véhicules'
      case '/inspections':
        return 'Inspections'
      case '/maintenance':
        return 'Maintenance'
      case '/settings':
        return 'Paramètres'
      case '/users':
        return 'Utilisateurs'
      default:
        return title
    }
  }

  return (
    <header className="sticky top-0 z-50 bg-white border-b border-gray-200">
      <div className="px-4 h-14 flex items-center justify-between">
        <div className="flex items-center gap-3">
          {showBack && (
            <button
              onClick={() => router.back()}
              className="p-1 -ml-1 rounded-full hover:bg-gray-50"
            >
              <ChevronLeftIcon className="h-6 w-6" />
            </button>
          )}
          <h1 className="text-lg font-semibold">{getPageTitle()}</h1>
        </div>
        <div className="flex items-center gap-3">
          {action}
          <button
            onClick={() => signOut({ callbackUrl: '/login' })}
            className="p-1 rounded-full hover:bg-gray-50"
            title="Se déconnecter"
          >
            <PowerIcon className="h-6 w-6 text-gray-500 hover:text-red-600" />
          </button>
        </div>
      </div>
      {description && (
        <div className="px-4 py-2 bg-gray-50">
          <p className="text-sm text-gray-600">{description}</p>
        </div>
      )}
    </header>
  )
}

=== /Users/capmission/Documents/carcheck/src/components/layout/MobileNav.tsx ===
'use client'

import Link from 'next/link'
import { usePathname } from 'next/navigation'
import {
  HomeIcon,
  ClipboardDocumentCheckIcon,
  WrenchScrewdriverIcon,
  Cog6ToothIcon,
  UserIcon
} from '@heroicons/react/24/outline'
import {
  HomeIcon as HomeIconSolid,
  ClipboardDocumentCheckIcon as ClipboardDocumentCheckIconSolid,
  WrenchScrewdriverIcon as WrenchScrewdriverIconSolid,
  Cog6ToothIcon as Cog6ToothIconSolid,
  UserIcon as UserIconSolid
} from '@heroicons/react/24/solid'
import { cn } from '@/lib/utils'
import { useSession } from 'next-auth/react'

const navItemsByRole = {
  'Safety': [
    { name: 'Accueil', href: '/', icon: HomeIcon, activeIcon: HomeIconSolid },
    { name: 'Inventaire', href: '/inventory', icon: WrenchScrewdriverIcon, activeIcon: WrenchScrewdriverIconSolid },
    { name: 'Utilisateurs', href: '/users', icon: UserIcon, activeIcon: UserIconSolid },
    { name: 'Paramètres', href: '/settings', icon: Cog6ToothIcon, activeIcon: Cog6ToothIconSolid },
  ],
  'Maintenance': [
    { name: 'Accueil', href: '/', icon: HomeIcon, activeIcon: HomeIconSolid },
    { name: 'Tâches', href: '/maintenance', icon: WrenchScrewdriverIcon, activeIcon: WrenchScrewdriverIconSolid },
    { name: 'Véhicules', href: '/vehicles', icon: WrenchScrewdriverIcon, activeIcon: WrenchScrewdriverIconSolid },
    { name: 'Paramètres', href: '/settings', icon: Cog6ToothIcon, activeIcon: Cog6ToothIconSolid },
  ],
  'Inspecteur': [
    { name: 'Accueil', href: '/', icon: HomeIcon, activeIcon: HomeIconSolid },
    { name: 'Inspections', href: '/inspections', icon: ClipboardDocumentCheckIcon, activeIcon: ClipboardDocumentCheckIconSolid },
    { name: 'Véhicules', href: '/vehicles', icon: WrenchScrewdriverIcon, activeIcon: WrenchScrewdriverIconSolid },
    { name: 'Paramètres', href: '/settings', icon: Cog6ToothIcon, activeIcon: Cog6ToothIconSolid },
  ]
}

export default function MobileNav() {
  const { data: session } = useSession()
  const pathname = usePathname()
  const role = session?.user?.role || 'Safety'  // Par défaut, utiliser Safety si aucun rôle

  const navItems = navItemsByRole[role] || []

  return (
    <nav className="fixed bottom-0 left-0 right-0 z-50 bg-white border-t border-gray-200 dark:bg-gray-900 dark:border-gray-700">
      <div className="grid h-16 max-w-lg grid-cols-4 mx-auto">
        {navItems.map((item) => {
          const isActive = pathname === item.href
          const Icon = isActive ? item.activeIcon : item.icon
          return (
            <Link
              key={item.name}
              href={item.href}
              className={cn(
                'inline-flex flex-col items-center justify-center px-5 hover:bg-gray-50 dark:hover:bg-gray-800',
                isActive && 'text-blue-600 dark:text-blue-500'
              )}
            >
              <Icon
                className={`h-6 w-6 ${
                  isActive ? 'text-blue-600' : 'text-gray-500'
                }`}
              />
              <span
                className={`mt-1 text-xs ${
                  isActive ? 'text-blue-600 font-medium' : 'text-gray-500'
                }`}
              >
                {item.name}
              </span>
            </Link>
          )
        })}
      </div>
    </nav>
  )
}


=== /Users/capmission/Documents/carcheck/src/components/maintenance/MaintenanceTaskForm.tsx ===
'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/Button'
import { Input } from '@/components/ui/Input'
import { Label } from '@/components/ui/Label'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { MaintenanceTaskFormData } from '@/types/models'
import { Calendar } from '@/components/ui/calendar'

interface MaintenanceTaskFormProps {
  onSubmit: (data: MaintenanceTaskFormData) => Promise<void>
  inspections: Array<{
    id: string
    date: Date
    vehicle: {
      id: string
      brand: string
      affectation: string
    }
  }>
}

export function MaintenanceTaskForm({ onSubmit, inspections }: MaintenanceTaskFormProps) {
  const [formData, setFormData] = useState<MaintenanceTaskFormData>({
    description: '',
    priority: 'medium',
    status: 'pending',
    vehicleId: '',
    notes: '',
  })

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    await onSubmit(formData)
    setFormData({
      description: '',
      priority: 'medium',
      status: 'pending',
      vehicleId: '',
      notes: '',
    })
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>Nouvelle tâche de maintenance</CardTitle>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <Label>Inspection</Label>
            <Select
              value={formData.inspectionId}
              onValueChange={(value) => {
                const inspection = inspections.find(i => i.id === value)
                if (inspection) {
                  setFormData({
                    ...formData,
                    inspectionId: value,
                    vehicleId: inspection.vehicle.id
                  })
                }
              }}
            >
              <SelectTrigger>
                <SelectValue placeholder="Sélectionner une inspection" />
              </SelectTrigger>
              <SelectContent>
                {inspections?.map((inspection) => (
                  <SelectItem key={inspection.id} value={inspection.id}>
                    {inspection.vehicle.brand} - {inspection.vehicle.affectation} - {new Date(inspection.date).toLocaleDateString()}
                  </SelectItem>
                )) || <SelectItem disabled value="no-inspection">Aucune inspection disponible</SelectItem>}
              </SelectContent>
            </Select>
          </div>

          <div>
            <Label>Description</Label>
            <Input
              value={formData.description}
              onChange={(e) => setFormData({ ...formData, description: e.target.value })}
              required
            />
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <Label>Date de début</Label>
              <Calendar
                date={formData.startDate}
                onDateChange={(date) => setFormData({ ...formData, startDate: date })}
                placeholder="Date de début"
              />
            </div>
            <div>
              <Label>Date de fin prévue</Label>
              <Calendar
                date={formData.endDate}
                onDateChange={(date) => setFormData({ ...formData, endDate: date })}
                placeholder="Date de fin"
              />
            </div>
          </div>

          <div>
            <Label>Priorité</Label>
            <Select
              value={formData.priority}
              onValueChange={(value: MaintenanceTaskFormData['priority']) => 
                setFormData({ ...formData, priority: value })}
            >
              <SelectTrigger>
                <SelectValue placeholder="Sélectionner la priorité" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="low">Faible</SelectItem>
                <SelectItem value="medium">Moyenne</SelectItem>
                <SelectItem value="high">Haute</SelectItem>
                <SelectItem value="critical">Critique</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div>
            <Label>Assigné à</Label>
            <Input
              value={formData.assignedTo}
              onChange={(e) => setFormData({ ...formData, assignedTo: e.target.value })}
            />
          </div>

          <div>
            <Label>Notes</Label>
            <Input
              value={formData.notes}
              onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
            />
          </div>

          <Button type="submit">Créer la tâche</Button>
        </form>
      </CardContent>
    </Card>
  )
}

=== /Users/capmission/Documents/carcheck/src/components/maintenance/MaintenanceTaskList.tsx ===
// src/components/maintenance/MaintenanceTaskList.tsx
'use client'

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { MaintenanceTask } from '@/types/models'

interface MaintenanceTaskListProps {
  tasks: MaintenanceTask[]
}

export default function MaintenanceTaskList({ tasks }: MaintenanceTaskListProps) {
  return (
    <Card>
      <CardHeader>
        <CardTitle>Tâches en cours</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {tasks.map((task) => (
            <div
              key={task.id}
              className="border rounded-lg p-4 space-y-2"
            >
              <div className="flex justify-between">
                <h3 className="font-medium">
                  {task.vehicle.brand} - {task.description}
                </h3>
                <span className={`px-2 py-1 rounded-full text-sm ${
                  task.priority === 'critical' ? 'bg-red-100 text-red-800' :
                  task.priority === 'high' ? 'bg-orange-100 text-orange-800' :
                  task.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                  'bg-blue-100 text-blue-800'
                }`}>
                  {task.priority}
                </span>
              </div>
              <p className="text-sm text-gray-500">{task.notes}</p>
              <div className="text-sm">
                <span>Status: {task.status}</span>
                {task.assignedTo && <span className="ml-4">Assigné à: {task.assignedTo}</span>}
              </div>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  )
}


=== /Users/capmission/Documents/carcheck/src/components/providers/SessionProvider.tsx ===
"use client";

import { SessionProvider } from "next-auth/react";
import { ReactNode } from "react";

interface Props {
  children: ReactNode;
}

export default function NextAuthProvider({ children }: Props) {
  return (
    <SessionProvider>
      {children}
    </SessionProvider>
  );
}

=== /Users/capmission/Documents/carcheck/src/components/ui/AddButton.tsx ===
// components/common/AddButton.tsx
import Link from 'next/link'
import { PlusIcon } from '@heroicons/react/24/outline'

interface AddButtonProps {
  href: string
  label: string
}

export default function AddButton({ href, label }: AddButtonProps) {
  return (
    <div className="p-4">
      <Link
        href={href}
        className="inline-flex items-center justify-center rounded-md bg-blue-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-blue-500"
      >
        <PlusIcon className="h-5 w-5 mr-1" />
        <span>{label}</span>
      </Link>
    </div>
  )
}

=== /Users/capmission/Documents/carcheck/src/components/ui/Badge.tsx ===
import { HTMLAttributes, forwardRef } from 'react'
import { cva, type VariantProps } from 'class-variance-authority'
import { cn } from '@/lib/utils'

const badgeVariants = cva(
  'inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground hover:bg-primary/80',
        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/80',
        outline: 'text-foreground',
        success: 'bg-green-500 text-white hover:bg-green-400',
        warning: 'bg-yellow-500 text-black hover:bg-yellow-400',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  }
)

export interface BadgeProps
  extends HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {
  children: React.ReactNode
  variant?: 'default' | 'secondary' | 'destructive' | 'outline' | 'success' | 'warning'
}

const Badge = forwardRef<HTMLDivElement, BadgeProps>(
  ({ className, variant, children, ...props }, ref) => {
    return (
      <div
        className={cn(badgeVariants({ variant }), className)}
        ref={ref}
        {...props}
      >
        {children}
      </div>
    )
  }
)
Badge.displayName = 'Badge'

export { Badge, badgeVariants }


=== /Users/capmission/Documents/carcheck/src/components/ui/Button.tsx ===
// Code du composant Button

import { ButtonHTMLAttributes, forwardRef } from 'react'
import { cva, type VariantProps } from 'class-variance-authority'
import { cn } from '@/lib/utils'

const buttonVariants = cva(
  'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground hover:bg-primary/90',
        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',
        outline: 'border border-input hover:bg-accent hover:text-accent-foreground',
        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
        ghost: 'hover:bg-accent hover:text-accent-foreground',
        link: 'underline-offset-4 hover:underline text-primary',
      },
      size: {
        default: 'h-10 py-2 px-4',
        sm: 'h-9 px-3 rounded-md',
        lg: 'h-11 px-8 rounded-md',
        icon: 'h-10 w-10',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
)

export interface ButtonProps
  extends ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {}

const Button = forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, ...props }, ref) => {
    return (
      <button
        className={cn(buttonVariants({ variant, size }), className)}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = 'Button'

export { Button, buttonVariants }


=== /Users/capmission/Documents/carcheck/src/components/ui/Input.tsx ===
// Code du composant input

import { forwardRef } from 'react';
import { cn } from '@/lib/utils';

interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {
  error?: string;
}

const Input = forwardRef<HTMLInputElement, InputProps>(
  ({ className, error, ...props }, ref) => {
    return (
      <div>
        <input
          className={cn(
            'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
            error && 'border-red-500',
            className
          )}
          ref={ref}
          {...props}
        />
      </div>
    );
  }
);

Input.displayName = 'Input';

export { Input };


=== /Users/capmission/Documents/carcheck/src/components/ui/Label.tsx ===
// Code du composant Label

import * as React from 'react'
import { cn } from '@/lib/utils'

export interface LabelProps
  extends React.LabelHTMLAttributes<HTMLLabelElement> {}

const Label = React.forwardRef<HTMLLabelElement, LabelProps>(
  ({ className, ...props }, ref) => (
    <label
      ref={ref}
      className={cn(
        'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',
        className
      )}
      {...props}
    />
  )
)

Label.displayName = 'Label'

export { Label }


=== /Users/capmission/Documents/carcheck/src/components/ui/Switch.tsx ===
'use client'

import * as React from 'react'
import * as SwitchPrimitives from '@radix-ui/react-switch'
import { cn } from '@/lib/utils'

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      'peer inline-flex h-[24px] w-[44px] shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input',
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        'pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0'
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }


=== /Users/capmission/Documents/carcheck/src/components/ui/calendar.tsx ===
"use client"

import * as React from "react"
import { cn } from "@/lib/utils"
import { format } from "date-fns"
import { fr } from 'date-fns/locale'
import { CalendarIcon } from "lucide-react"

interface CalendarProps extends React.InputHTMLAttributes<HTMLInputElement> {
  date?: Date
  onDateChange?: (date: Date) => void
}

export function Calendar({ 
  className,
  date,
  onDateChange,
  ...props 
}: CalendarProps) {
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newDate = e.target.valueAsDate
    if (newDate && onDateChange) {
      onDateChange(newDate)
    }
  }

  return (
    <div className="relative">
      <div className="absolute inset-y-0 start-0 flex items-center ps-3.5 pointer-events-none">
        <CalendarIcon className="w-4 h-4 text-gray-500" />
      </div>
      <input
        type="date"
        className={cn(
          "bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg",
          "focus:ring-blue-500 focus:border-blue-500 block w-full ps-10 p-2.5",
          "dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400",
          "dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500",
          className
        )}
        value={date ? format(date, 'yyyy-MM-dd') : ''}
        onChange={handleChange}
        {...props}
      />
    </div>
  )
}

=== /Users/capmission/Documents/carcheck/src/components/ui/card.tsx ===
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


=== /Users/capmission/Documents/carcheck/src/components/ui/date-picker.tsx ===
// src/components/ui/date-picker.tsx
"use client"

import * as React from "react"
import { format } from "date-fns"
import { Calendar as CalendarIcon } from "lucide-react"
import { cn } from "@/lib/utils"
import { Button } from "./Button"
import { Calendar } from "./calendar"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "./popover"

interface DatePickerProps {
  date?: Date
  onSelect: (date: Date | undefined) => void
}

export function DatePicker({ date, onSelect }: DatePickerProps) {
  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button
          variant={"outline"}
          className={cn(
            "w-full justify-start text-left font-normal",
            !date && "text-muted-foreground"
          )}
        >
          <CalendarIcon className="mr-2 h-4 w-4" />
          {date ? format(date, "PPP") : <span>Sélectionner une date</span>}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-auto p-0" align="start">
        <Calendar
          mode="single"
          selected={date}
          onSelect={onSelect}
          initialFocus
        />
      </PopoverContent>
    </Popover>
  )
}


=== /Users/capmission/Documents/carcheck/src/components/ui/dialog.tsx ===
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}


=== /Users/capmission/Documents/carcheck/src/components/ui/popover.tsx ===
// src/components/ui/popover.tsx
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }


=== /Users/capmission/Documents/carcheck/src/components/ui/scroll-area.tsx ===
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }


=== /Users/capmission/Documents/carcheck/src/components/ui/select.tsx ===
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}


=== /Users/capmission/Documents/carcheck/src/components/ui/tabs.tsx ===
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }


=== /Users/capmission/Documents/carcheck/src/components/ui/textarea.tsx ===
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }


=== /Users/capmission/Documents/carcheck/src/lib/defaultParts.ts ===
import { DefaultPart } from '@/types';

export const defaultParts: Omit<DefaultPart, 'id' | 'createdAt'>[] = [
  // Fluides et Niveaux
  {
    name: 'Niveau de Liquide de Refroidissement',
    icon: 'alert',
    category: 'Fluides et Niveaux',
    description: 'Vérification du niveau de liquide de refroidissement',
    isActive: true,
    isDefault: true
  },
  {
    name: 'Niveau Huile de Frein',
    icon: 'oil',
    category: 'Fluides et Niveaux',
    description: 'Contrôle du niveau d\'huile de frein',
    isActive: true,
    isDefault: true
  },
  {
    name: 'Niveau Huile Moteur',
    icon: 'oil-can',
    category: 'Fluides et Niveaux',
    description: 'Vérification du niveau d\'huile moteur',
    isActive: true,
    isDefault: true
  },
  {
    name: 'Niveau de Carburant',
    icon: 'fuel',
    category: 'Fluides et Niveaux',
    description: 'Contrôle du niveau de carburant',
    isActive: true,
    isDefault: true
  },
  {
    name: 'Niveau Huile Direction',
    icon: 'steering',
    category: 'Fluides et Niveaux',
    description: 'Vérification du niveau d\'huile de direction assistée',
    isActive: true,
    isDefault: true
  },

  // Système de Freinage
  {
    name: 'Test Freins de Service',
    icon: 'brake-warning',
    category: 'Système de Freinage',
    description: 'Vérification des freins de service',
    isActive: true,
    isDefault: true
  },
  {
    name: 'Test Frein de Stationnement',
    icon: 'parking',
    category: 'Système de Freinage',
    description: 'Contrôle du frein de stationnement',
    isActive: true,
    isDefault: true
  },

  // Éclairage
  {
    name: 'Phares Avant',
    icon: 'lightbulb',
    category: 'Éclairage',
    description: 'Vérification des phares avant',
    isActive: true,
    isDefault: true
  },
  {
    name: 'Feux Arrière',
    icon: 'lightbulb-outline',
    category: 'Éclairage',
    description: 'Contrôle des feux arrière',
    isActive: true,
    isDefault: true
  },

  // Sécurité
  {
    name: 'Extincteur',
    icon: 'fire-extinguisher',
    category: 'Sécurité',
    description: 'Vérification de l\'extincteur',
    isActive: true,
    isDefault: true
  },
  {
    name: 'Trousse de Premiers Secours',
    icon: 'first-aid',
    category: 'Sécurité',
    description: 'Contrôle de la trousse de premiers secours',
    isActive: true,
    isDefault: true
  },
  {
    name: 'Interrupteurs d\'Isolation',
    icon: 'toggle-off',
    category: 'Sécurité',
    description: 'Vérification des interrupteurs d\'isolation',
    isActive: true,
    isDefault: true
  },

  // Pneumatiques et Roues
  {
    name: 'Roue de Secours et Cric',
    icon: 'car-wheel',
    category: 'Pneumatiques et Roues',
    description: 'Vérification de la roue de secours et du cric',
    isActive: true,
    isDefault: true
  },
  {
    name: 'État des Pneus et Jantes',
    icon: 'car-tire',
    category: 'Pneumatiques et Roues',
    description: 'Contrôle de l\'état des pneus et des jantes',
    isActive: true,
    isDefault: true
  },

  // Habitacle
  {
    name: 'État des Sièges et Ceintures',
    icon: 'car-seat',
    category: 'Habitacle',
    description: 'Vérification des sièges et ceintures de sécurité',
    isActive: true,
    isDefault: true
  },
  {
    name: 'Propreté de l\'Habitacle',
    icon: 'broom',
    category: 'Habitacle',
    description: 'Contrôle de la propreté de l\'habitacle',
    isActive: true,
    isDefault: true
  },
  {
    name: 'Fonctionnement Climatisation',
    icon: 'fan',
    category: 'Habitacle',
    description: 'Vérification du système de climatisation',
    isActive: true,
    isDefault: true
  },

  // Équipements de Communication
  {
    name: 'Fonctionnement Radio',
    icon: 'radio',
    category: 'Équipements de Communication',
    description: 'Contrôle du système radio',
    isActive: true,
    isDefault: true
  },
  {
    name: 'Caméra de Gestion de Fatigue',
    icon: 'eye',
    category: 'Équipements de Communication',
    description: 'Vérification de la caméra de surveillance de fatigue',
    isActive: true,
    isDefault: true
  }
];

=== /Users/capmission/Documents/carcheck/src/lib/prisma.ts ===
import { PrismaClient, Role } from '@prisma/client';
import bcrypt from 'bcrypt';

// Définir un type global pour Prisma
const globalForPrisma = globalThis as { prisma?: PrismaClient };

// Création ou récupération de l'instance Prisma
const prisma = globalForPrisma.prisma || new PrismaClient({
  log: process.env.NODE_ENV === 'development' ? ['error', 'warn'] : ['error'],
});

// Stocker l'instance dans l'objet global en mode développement
if (process.env.NODE_ENV !== 'production') {
  globalForPrisma.prisma = prisma;
}

// Fonction pour créer un nouvel utilisateur avec un mot de passe haché
async function createUser(
  firstName: string,
  lastName: string,
  email: string,
  password: string,
  role: Role
) {
  try {
    // Hachage du mot de passe avant de l'enregistrer
    const hashedPassword = await bcrypt.hash(password, 10);

    return await prisma.user.create({
      data: {
        firstName,
        lastName,
        email,
        password: hashedPassword, // Mot de passe haché
        role,
      },
    });
  } catch (error) {
    console.error("Erreur lors de la création de l'utilisateur:", error);
    throw new Error('Erreur lors de la création de l’utilisateur.');
  }
}

// Exporter l'instance Prisma et la fonction createUser
export { prisma, createUser };


=== /Users/capmission/Documents/carcheck/src/lib/protectedRoute.ts ===
import { getServerSession } from "next-auth"
import { authOptions } from "@/app/api/auth/[...nextauth]/route"
import { redirect } from "next/navigation"
import { Role } from "@prisma/client"

export async function protectedRoute(allowedRoles?: Role[]) {
  const session = await getServerSession(authOptions)

  if (!session) {
    redirect('/login')
  }

  if (allowedRoles && !allowedRoles.includes(session.user.role)) {
    redirect('/')
  }

  return session
}

=== /Users/capmission/Documents/carcheck/src/lib/storage.ts ===
import { writeFile } from 'fs/promises'
import path from 'path'

export async function uploadVehicleImage(file: File) {
  try {
    const bytes = await file.arrayBuffer()
    const buffer = Buffer.from(bytes)

    // Créer un nom de fichier unique
    const timestamp = Date.now()
    const filename = `${timestamp}-${file.name}`
    
    // Chemin de sauvegarde (dossier public pour l'accès web)
    const uploadDir = path.join(process.cwd(), 'public', 'uploads', 'vehicles')
    const filePath = path.join(uploadDir, filename)

    // Sauvegarder le fichier
    await writeFile(filePath, buffer)

    // Retourner le chemin relatif pour la base de données
    return `/uploads/vehicles/${filename}`
  } catch (error) {
    console.error('Error saving image:', error)
    throw new Error('Erreur lors de la sauvegarde de l\'image')
  }
}

=== /Users/capmission/Documents/carcheck/src/lib/utils.ts ===
import { type ClassValue, clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export function formatDate(date: Date | string) {
  return new Date(date).toLocaleDateString('fr-FR', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  })
}

export function getHealthStatusColor(status: string) {
  switch (status.toLowerCase()) {
    case 'critical':
      return 'bg-red-100 text-red-800'
    case 'warning':
      return 'bg-yellow-100 text-yellow-800'
    case 'good':
      return 'bg-green-100 text-green-800'
    default:
      return 'bg-gray-100 text-gray-800'
  }
}

export function getSeverityColor(severity: string) {
  switch (severity.toLowerCase()) {
    case 'low':
      return 'bg-blue-100 text-blue-800'
    case 'medium':
      return 'bg-yellow-100 text-yellow-800'
    case 'high':
      return 'bg-orange-100 text-orange-800'
    case 'critical':
      return 'bg-red-100 text-red-800'
    default:
      return 'bg-gray-100 text-gray-800'
  }
}

import { FieldError, Merge, FieldErrorsImpl } from 'react-hook-form';

export const getErrorMessage = (
  error: FieldError | Merge<FieldError, FieldErrorsImpl<any>> | undefined
): string | undefined => {
  if (!error) return undefined;
  const errorMessage = error;
  if (typeof errorMessage === 'string') {
    return errorMessage;
  } else if (errorMessage && 'message' in errorMessage && typeof errorMessage.message === 'string') {
    return errorMessage.message;
  } else {
    return undefined;
  }
};


=== /Users/capmission/Documents/carcheck/src/types/index.ts ===
import { DefaultSession } from "next-auth";

export type UserRole = "Admin" | "Inspecteur" | "Manager";

declare module "next-auth" {
  interface Session {
    user: {
      id?: string;
      role?: UserRole;
      firstName?: string;
      lastName?: string;
      badge?: string;
      email?: string;
    } & DefaultSession["user"];
  }
}

export type Part = {
  id: string;
  name: string;
  status: string;
  severity: "low" | "medium" | "high" | "critical";
  description?: string;
  category?: string;
  icon?: string;
};

export type Vehicle = {
  id: string;
  brand: string;
  affectation: string;
  parts: Part[];
  status?: "active" | "maintenance" | "retired";
  lastInspection?: Date;
};

export type InspectionStatus = "pending" | "in_progress" | "completed";
export type PartStatus = "good" | "warning" | "critical";


=== /Users/capmission/Documents/carcheck/src/types/models.ts ===
export interface Part {
  id: string;
  status: string;
  createdAt: Date;
  updatedAt: Date;
  name: string;
  vehicleId: string;
  severity: string;
  description: string | null;  // Changed from string | undefined to string | null
  category: string | null;     // Changed from string | undefined to string | null
  icon: string | null;         // Changed from string | undefined to string | null
  isDefault: boolean;
}

export interface Vehicle {
  id: string;
  brand: string;
  model: string;
  year: number;
  mileage: number;
  plateNumber: string;
  vin?: string;
  createdAt: Date;
  updatedAt: Date;
  parts: Part[];
  healthStatus?: string;
  lastInspection?: Date;
}

export interface MaintenanceTask {
  id: string;
  description: string;
  priority: 'low' | 'medium' | 'high' | 'critical';
  status: 'pending' | 'in_progress' | 'completed';
  assignedTo?: string;
  startDate?: Date;
  endDate?: Date;
  notes?: string;
  vehicleId: string;
  inspectionId?: string;
  vehicle: {
    brand: string;
    affectation: string;
  };
  inspection?: {
    date: Date;
    inspector: string;
  };
}

export interface MaintenanceTaskFormData {
  description: string;
  priority: MaintenanceTask['priority'];
  status: MaintenanceTask['status'];
  assignedTo?: string;
  startDate?: Date;
  endDate?: Date;
  notes?: string;
  vehicleId: string;
  inspectionId?: string;
}

// src/types.d.ts
declare module "next-auth" {
  interface User {
    id: string;
    name?: string | null;
    email?: string | null;
    image?: string | null;
    lastName?: string | null; // Add this line
  }
}

=== /Users/capmission/Documents/carcheck/src/types/react-day-picker.d.ts ===
declare module 'react-day-picker' {
  import { ComponentType } from 'react';

  export interface DayPickerProps {
    // Define the props that you will use from the library
  }

  export const DayPicker: ComponentType<DayPickerProps>;
}


=== /Users/capmission/Documents/carcheck/src/types.d.ts ===
// User Types
export type Role = 'Inspecteur' | 'Maintenance' | 'Safety';

export interface User {
  name: string;
  id: number;
  firstName: string;
  lastName: string;
  department?: string | null;
  phone?: string | null;
  badge?: string | null;
  password: string;
  role: Role;
  email: string;
  photo?: string | null;
}

// Vehicle Types
export interface Vehicle {
  id: string;
  brand: string;
  affectation: string;
  photo?: string | null;
  createdAt: Date;
  updatedAt: Date;
  healthStatus?: string | null;
  lastInspection?: Date | null;
  parts: Part[];
  inspectionVehicles: InspectionVehicle[];
  checkInParts: CheckInPart[];
  maintenanceTasks: MaintenanceTask[];
}

// Inspection Types
export type InspectionStatus = 'in_progress' | 'completed' | 'cancelled';

export interface Inspection {
  id: string;
  date: Date;
  inspector: string;
  badge: string;
  status: InspectionStatus;
  notes?: string | null;
  createdAt: Date;
  updatedAt: Date;
  vehicles: InspectionVehicle[];
  maintenanceTasks: MaintenanceTask[];
}

export interface InspectionVehicle {
  id: string;
  inspectionId: string;
  vehicleId: string;
  status: string;
  notes?: string | null;
  createdAt: Date;
  updatedAt: Date;
  inspection: Inspection;
  vehicle: Vehicle;
  parts: InspectionPart[];
}

export interface InspectionPart {
  id: string;
  inspectionVehicleId: string;
  partId: string;
  status: string;
  notes?: string | null;
  createdAt: Date;
  updatedAt: Date;
  inspectionVehicle: InspectionVehicle;
  part: Part;
}

// Maintenance Types
export type Priority = 'low' | 'medium' | 'high';
export type TaskStatus = 'pending' | 'in_progress' | 'completed' | 'cancelled';

export interface MaintenanceTask {
  id: string;
  description: string;
  priority: Priority;
  status: TaskStatus;
  assignedTo?: string | null;
  startDate?: Date | null;
  endDate?: Date | null;
  notes?: string | null;
  createdAt: Date;
  updatedAt: Date;
  inspection?: Inspection | null;
  inspectionId?: string | null;
  vehicle: Vehicle;
  vehicleId: string;
}

// Part Types
export type PartStatus = 'good' | 'warning' | 'critical';
export type Severity = 'low' | 'medium' | 'high';

export interface Part {
  id: string;
  vehicleId: string;
  name: string;
  status: PartStatus;
  severity: Severity;
  description?: string | null;
  category?: string | null;
  icon?: string | null;
  isDefault: boolean;
  createdAt: Date;
  updatedAt: Date;
  vehicle: Vehicle;
  inspectionParts: InspectionPart[];
}

export interface DefaultPart {
  id: string;
  name: string;
  icon: string;
  category: string;
  description?: string | null;
  isActive: boolean;
  isDefault: boolean;
  createdAt: Date;
}

// CheckIn Types
export interface CheckInItem {
  id: string;
  name: string;
  description?: string | null;
  icon?: string | null;
  category: string;
  isRequired: boolean;
  isDefault: boolean;
  isActive: boolean;
  checkIns: CheckInPart[];
  createdAt: Date;
  updatedAt: Date;
}

export interface CheckInPart {
  id: string;
  status: string;
  notes?: string | null;
  createdAt: Date;
  updatedAt: Date;
  vehicleId: string;
  vehicle: Vehicle;
  itemId: string;
  item: CheckInItem;
  histories: CheckInPartHistory[];
}

export interface CheckInPartHistory {
  id: string;
  checkInPartId: string;
  checkInPart: CheckInPart;
  status: string;
  severity?: string | null;
  description?: string | null;
  inspector?: string | null;
  createdAt: Date;
}

// API Response Types
export interface UserResponse {
  success: boolean;
  data?: User;
  error?: string;
}

export interface VehicleResponse {
  success: boolean;
  data?: Vehicle;
  error?: string;
}

// Session augmentation for NextAuth
declare module 'next-auth' {
  interface Session {
    user: {
      id: number;
      firstName: string;
      lastName: string;
      email: string;
      role: Role;
      badge?: string | null;
      photo?: string | null;
      department?: string | null;
      phone?: string | null;
    }
  }

  interface User {
    role: Role;
    firstName: string;
    lastName: string;
    badge?: string | null;
    department?: string | null;
    phone?: string | null;
  }
}
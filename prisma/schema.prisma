// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Vehicle {
  id              String            @id @default(cuid())
  brand           String
  model           String
  year            Int
  mileage         Int
  plateNumber     String            @map("plate_number")
  vin             String?
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @default(now()) @map("updated_at")
  parts           Part[]
  inspectionVehicles InspectionVehicle[]
  checkInParts    CheckInPart[]
  healthStatus    String?           // Added healthStatus property
  lastInspection   DateTime?        // Added lastInspection property

  @@map("vehicles")
}

model Inspection {
  id          String   @id @default(cuid())
  date        DateTime @default(now())
  inspector   String
  status      String   @default("in_progress")
  notes       String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
  vehicles    InspectionVehicle[]

  @@map("inspections")
}

model InspectionVehicle {
  id           String     @id @default(cuid())
  inspectionId String     @map("inspection_id")
  inspection   Inspection @relation(fields: [inspectionId], references: [id], onDelete: Cascade)
  vehicleId    String     @map("vehicle_id")
  vehicle      Vehicle    @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  status       String     @default("pending")
  notes        String?
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @default(now()) @map("updated_at")
  parts        InspectionPart[]

  @@map("inspection_vehicles")
}

model InspectionPart {
  id                  String            @id @default(cuid())
  inspectionVehicleId String            @map("inspection_vehicle_id")
  inspectionVehicle   InspectionVehicle @relation(fields: [inspectionVehicleId], references: [id], onDelete: Cascade)
  partId              String            @map("part_id")
  part                Part              @relation(fields: [partId], references: [id], onDelete: Cascade)
  status              String            @default("good")
  notes               String?
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @default(now()) @map("updated_at")

  @@map("inspection_parts")
}

model Part {
  id           String            @id @default(cuid())
  vehicleId    String           @map("vehicle_id")
  vehicle      Vehicle          @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  name         String
  status       String           @default("good")
  severity     String           @default("low")
  description  String?
  category     String?
  icon         String?
  isDefault    Boolean          @default(false)
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @default(now()) @map("updated_at")
  inspectionParts InspectionPart[]

  @@map("parts")
}

model CheckInItem {
  id          String        @id @default(cuid())
  name        String
  description String?
  icon        String?
  category    String
  isRequired  Boolean       @default(false)
  isDefault   Boolean       @default(false)  // Indique si c'est un élément standard
  isActive    Boolean       @default(true)   // Permet de désactiver sans supprimer
  checkIns    CheckInPart[]
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @default(now()) @map("updated_at")

  @@map("check_in_items")
}

model CheckInPart {
  id          String      @id @default(cuid())
  status      String
  notes       String?
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @default(now()) @map("updated_at")
  vehicleId   String      @map("vehicle_id")
  vehicle     Vehicle     @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  itemId      String      @map("item_id")
  item        CheckInItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  histories   CheckInPartHistory[]

  @@map("check_in_parts")
}

model CheckInPartHistory {
  id              String      @id @default(cuid())
  checkInPartId   String      @map("check_in_part_id")
  checkInPart     CheckInPart @relation(fields: [checkInPartId], references: [id], onDelete: Cascade)
  status          String
  severity        String?
  description     String?
  inspector       String?     // Added inspector property
  createdAt       DateTime    @default(now()) @map("created_at")

  @@map("check_in_part_histories")
}

model DefaultPart {
  id          String   @id @default(cuid())
  name        String   @unique
  icon        String
  category    String
  description String?
  isActive    Boolean  @default(true)
  isDefault   Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("default_parts")
}
